"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[8916],{3977:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-4d0fcc3b",path:"/page/js/algorithm/sku.html",title:"sku算法",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[],filePathRelative:"page/js/algorithm/sku.md",git:{updatedTime:1637576909e3,contributors:[{name:"liu-bluesky",email:"229236940@qq.com",commits:2}]}}},9581:(n,s,a)=>{a.r(s),a.d(s,{default:()=>o});var p=a(6252);const t={href:"https://juejin.cn/post/6914163217124032525",target:"_blank",rel:"noopener noreferrer"},e={},o=(0,a(3744).Z)(e,[["render",function(n,s){const a=(0,p.up)("OutboundLink");return(0,p.wg)(),(0,p.iD)(p.HY,null,[s[3]||(s[3]=(0,p._)("h1",{id:"sku算法",tabindex:"-1"},[(0,p._)("a",{class:"header-anchor",href:"#sku算法","aria-hidden":"true"},"#"),(0,p.Uk)(" sku算法")],-1)),(0,p._)("p",null,[s[1]||(s[1]=(0,p._)("strong",null,"订单sku规格选择",-1)),s[2]||(s[2]=(0,p.Uk)(" 参考 ")),(0,p._)("a",t,[s[0]||(s[0]=(0,p.Uk)("https://juejin.cn/post/6914163217124032525")),(0,p.Wm)(a)])]),s[4]||(s[4]=(0,p.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">/* 重新实现笛卡尔积 传入的数组 &#39;为空&#39;, &#39;长度为1&#39;, &#39;长度大于1&#39; 三种情况 分别处理\n\n入参数组格式: [\n              { attr:&quot;颜色&quot;, valueList:[&quot;黑&quot;,&quot;白&quot;] },\n              { attr:&quot;尺寸&quot;, valueList:[&quot;大&quot;,&quot;中&quot;] }\n          ] \n    返回的数组格式：[\n    {&quot;颜色&quot;:&quot;黑&quot;,&quot;尺寸&quot;:&quot;大&quot;},\n    {&quot;颜色&quot;:&quot;黑&quot;,&quot;尺寸&quot;:&quot;中&quot;},\n    {&quot;颜色&quot;:&quot;白&quot;,&quot;尺寸&quot;:&quot;大&quot;},\n    {&quot;颜色&quot;:&quot;白&quot;,&quot;尺寸&quot;:&quot;中&quot;}\n    ]\n   \n    */</span>\n<span class="token keyword">function</span> <span class="token function">generateBaseData</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token doc-comment comment">/**\n         *  [\n              <span class="token punctuation">{</span> attr:&quot;颜色&quot;, valueList:[&quot;黑&quot;,&quot;白&quot;] <span class="token punctuation">}</span>,\n              <span class="token punctuation">{</span> attr:&quot;尺寸&quot;, valueList:[&quot;大&quot;,&quot;中&quot;] <span class="token punctuation">}</span>\n          ] \n         */</span>\n        <span class="token keyword">let</span> <span class="token punctuation">[</span>item_spec<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token comment">//arr 是数组</span>\n        <span class="token keyword">return</span> item_spec<span class="token punctuation">.</span>valueList<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n            <span class="token keyword">return</span> <span class="token punctuation">{</span>\n                <span class="token punctuation">[</span>item_spec<span class="token punctuation">.</span>attr<span class="token punctuation">]</span><span class="token operator">:</span> x\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length <span class="token operator">&gt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token doc-comment comment">/**\n         * 菜鸟平台 https://www.runoob.com/jsref/jsref-reduce.html\n         * total \t必需。初始值, 或者计算结束后的返回值。\n            currentValue \t必需。当前元素\n            当前函数解释\n         * accumulator 第二次处理后的数据\n         * spec_item 当前需要处理的数据\n         */</span>\n        <span class="token keyword">return</span> arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">accumulator<span class="token punctuation">,</span> spec_item</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n            <span class="token keyword">let</span> acc_value_list <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>accumulator<span class="token punctuation">.</span>valueList<span class="token punctuation">)</span> <span class="token operator">?</span> accumulator<span class="token punctuation">.</span>valueList <span class="token operator">:</span> accumulator\n            <span class="token keyword">let</span> item_value_list <span class="token operator">=</span> spec_item<span class="token punctuation">.</span>valueList\n            <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">acc_value_list</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> acc_value_list<span class="token punctuation">)</span>\n            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">item_value_list</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> item_value_list<span class="token punctuation">)</span>\n            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token keyword">in</span> acc_value_list<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token keyword">in</span> item_value_list<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                    <span class="token keyword">let</span> temp_data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n                  \n                    <span class="token keyword">if</span> <span class="token punctuation">(</span>acc_value_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>constructor <span class="token operator">===</span> Object<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                         <span class="token comment">// 如果是对象 说明商品·规格还没·组合过</span>\n                   <span class="token doc-comment comment">/**\n                    * [\n                    <span class="token punctuation">{</span> &#39;颜色&#39;: &#39;黑&#39;, &#39;尺寸&#39;: &#39;大&#39; <span class="token punctuation">}</span>,\n                    <span class="token punctuation">{</span> &#39;颜色&#39;: &#39;黑&#39;, &#39;尺寸&#39;: &#39;中&#39; <span class="token punctuation">}</span>,\n                    <span class="token punctuation">{</span> &#39;颜色&#39;: &#39;白&#39;, &#39;尺寸&#39;: &#39;大&#39; <span class="token punctuation">}</span>,\n                    <span class="token punctuation">{</span> &#39;颜色&#39;: &#39;白&#39;, &#39;尺寸&#39;: &#39;中&#39; <span class="token punctuation">}</span>\n                    ]\n                    */</span>\n                        temp_data <span class="token operator">=</span> <span class="token punctuation">{</span>\n                            <span class="token operator">...</span>acc_value_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>\n                            <span class="token punctuation">[</span>spec_item<span class="token punctuation">.</span>attr<span class="token punctuation">]</span><span class="token operator">:</span> item_value_list<span class="token punctuation">[</span>j<span class="token punctuation">]</span>\n                        <span class="token punctuation">}</span>\n                        <span class="token comment">// 否则如果是字符串</span>\n                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n                     <span class="token comment">// 如果不是对象 说明商品·规格还没·组合过一次</span>\n                    <span class="token doc-comment comment">/**\n                     * acc_value_list [ &#39;黑&#39;, &#39;白&#39; ] 数据类型是这种的\n                        item_value_list [ &#39;大&#39;, &#39;中&#39; ]\n                     */</span>\n                        temp_data<span class="token punctuation">[</span>accumulator<span class="token punctuation">.</span>attr<span class="token punctuation">]</span> <span class="token operator">=</span> acc_value_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span>\n                        temp_data<span class="token punctuation">[</span>spec_item<span class="token punctuation">.</span>attr<span class="token punctuation">]</span> <span class="token operator">=</span> item_value_list<span class="token punctuation">[</span>j<span class="token punctuation">]</span>\n                    <span class="token punctuation">}</span>\n                    result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>temp_data<span class="token punctuation">)</span>\n                <span class="token punctuation">}</span>\n            <span class="token punctuation">}</span>\n            <span class="token keyword">return</span> result\n        <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br></div></div><p><strong>订单sku规格选择</strong></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>   <span class="token function">isDisabledSku</span><span class="token punctuation">(</span><span class="token parameter">valueId</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t   <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>skuValueId<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t    <span class="token keyword">return</span><span class="token punctuation">;</span>\n\t   <span class="token punctuation">}</span>\n\t   <span class="token comment">// 判断库存为0的禁止点击，也可以考虑换成淘宝的模式（允许点击，但提示库存为0、确定按钮改成库存不足禁止下一步操作）</span>\n\t   <span class="token keyword">let</span> isDisabled <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n\t   <span class="token keyword">this</span><span class="token punctuation">.</span>combs<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n\t    <span class="token keyword">if</span> <span class="token punctuation">(</span>item<span class="token punctuation">.</span>skuNum <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> \n\t\t\t<span class="token comment">//如果sku有为0的就跟当前 valueId对比是否有这个id</span>\n\t\t\tconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>comb<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;,&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t     <span class="token keyword">const</span> itemComb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>comb<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;,&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t     <span class="token keyword">if</span> <span class="token punctuation">(</span>itemComb<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>valueId <span class="token operator">+</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t     <span class="token comment">//有id 就对比当前保存的skuid 跟当为0的对比如果长度一样就返回true 说明有 反之没有</span>\n\t      <span class="token keyword">const</span> intersect <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>skuValueId<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token operator">=&gt;</span> itemComb<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>x <span class="token operator">+</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>intersect<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>itemComb<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t      isDisabled <span class="token operator">=</span> intersect<span class="token punctuation">.</span>length <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">===</span> itemComb<span class="token punctuation">.</span>size<span class="token punctuation">;</span>\n\t     <span class="token punctuation">}</span>\n\t    <span class="token punctuation">}</span>\n\t   <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t   <span class="token keyword">return</span> isDisabled<span class="token punctuation">;</span>\n\t  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div>',3))],64)}]])},3744:(n,s)=>{s.Z=(n,s)=>{const a=n.__vccOpts||n;for(const[n,p]of s)a[n]=p;return a}}}]);