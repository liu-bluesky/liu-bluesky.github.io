"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[4707],{3321:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-d29f52b6",path:"/page/js/function/rule.html",title:"",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"正则使用",slug:"正则使用",children:[]},{level:2,title:"使用案例",slug:"使用案例",children:[]}],filePathRelative:"page/js/function/rule.md",git:{updatedTime:1680504147e3,contributors:[{name:"blue",email:"229236940@qq.com",commits:1}]}}},1918:(n,s,a)=>{a.r(s),a.d(s,{default:()=>e});var p=a(6252);const t={},e=(0,a(3744).Z)(t,[["render",function(n,s){return s[0]||(s[0]=(0,p.uE)('<h2 id="正则使用" tabindex="-1"><a class="header-anchor" href="#正则使用" aria-hidden="true">#</a> 正则使用</h2><blockquote><p>创建js文件 引入下面内容 按需导入</p></blockquote><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>\n<span class="token keyword">const</span> rule <span class="token operator">=</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">phone</span><span class="token operator">:</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^1[3|4|5|7|8|9][0-9]\\d{8}$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>\n    <span class="token literal-property property">regIdCard</span><span class="token operator">:</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^(^[1-9]\\d{7}((0\\d)|(1[0-2]))(([0|1|2]\\d)|3[0-1])\\d{3}$)|(^[1-9]\\d{5}[1-9]\\d{3}((0\\d)|(1[0-2]))(([0|1|2]\\d)|3[0-1])((\\d{4})|\\d{3}[Xx])$)$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>\n    <span class="token literal-property property">email</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^([A-Za-z0-9_\\-\\.])+\\@([A-Za-z0-9_\\-\\.])+\\.([A-Za-z]{2,4})$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>\n    <span class="token literal-property property">password1</span><span class="token operator">:</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^.*(?=.{6,20})(?=.*\\d)(?=.*[A-Z])(?=.*[a-z])(?=.*[!@#$%^&amp;*? ]).*$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token comment">//密码强度正则，最少6位，包括至少1个大写字母，1个小写字母，1个数字，1个特殊字符</span>\n    <span class="token literal-property property">cart</span><span class="token operator">:</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[京津沪渝冀豫云辽黑湘皖鲁新苏浙赣鄂桂甘晋蒙陕吉闽贵粤青藏川宁琼使领A-Z]{1}[A-Z]{1}[A-Z0-9]{4}[A-Z0-9挂学警港澳]{1}$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>\n    <span class="token literal-property property">includingChinese</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[\\u4E00-\\u9FA5]</span><span class="token regex-delimiter">/</span></span>\n<span class="token punctuation">}</span>\n<span class="token keyword">export</span> <span class="token keyword">const</span>  <span class="token function-variable function">includingChinese</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token parameter">text</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span><span class="token punctuation">{</span>\n    <span class="token keyword">return</span> rule<span class="token punctuation">.</span>includingChinese<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">export</span> <span class="token keyword">const</span>  <span class="token function-variable function">isCart</span> <span class="token operator">=</span><span class="token punctuation">(</span><span class="token parameter">cart</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span><span class="token punctuation">{</span>\n    <span class="token keyword">return</span> rule<span class="token punctuation">.</span>cart<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>cart<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">export</span> <span class="token keyword">const</span>  <span class="token function-variable function">password</span> <span class="token operator">=</span><span class="token punctuation">(</span><span class="token parameter">password</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span><span class="token punctuation">{</span>\n    <span class="token keyword">return</span> rule<span class="token punctuation">.</span>password1<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">export</span> <span class="token keyword">const</span>  <span class="token function-variable function">isEmail</span> <span class="token operator">=</span><span class="token punctuation">(</span><span class="token parameter">email</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span><span class="token punctuation">{</span>\n    <span class="token keyword">return</span> rule<span class="token punctuation">.</span>email<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>email<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">export</span> <span class="token keyword">const</span>  <span class="token function-variable function">isPhone</span> <span class="token operator">=</span><span class="token punctuation">(</span><span class="token parameter">phone</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span><span class="token punctuation">{</span>\n    <span class="token keyword">return</span> rule<span class="token punctuation">.</span>phone<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>phone<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">export</span> <span class="token keyword">const</span>  <span class="token function-variable function">isIdCard</span> <span class="token operator">=</span><span class="token punctuation">(</span><span class="token parameter">idCard</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span><span class="token punctuation">{</span>\n\t<span class="token comment">// 15位和18位身份证号码的正则表达式</span>\n\t<span class="token keyword">var</span> regIdCard <span class="token operator">=</span> rule<span class="token punctuation">.</span>regIdCard\n\t<span class="token comment">// 如果通过该验证，说明身份证格式正确，但准确性还需计算</span>\n\t<span class="token keyword">if</span> <span class="token punctuation">(</span>regIdCard<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>idCard<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token keyword">if</span> <span class="token punctuation">(</span>idCard<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">18</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t\t<span class="token keyword">var</span> idCardWi <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span>\n\t\t\t\t\t<span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 将前17位加权因子保存在数组里</span>\n\t\t\t<span class="token keyword">var</span> idCardY <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 这是除以11后，可能产生的11位余数、验证码，也保存成数组</span>\n\t\t\t<span class="token keyword">var</span> idCardWiSum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 用来保存前17位各自乖以加权因子后的总和</span>\n\t\t\t<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">17</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t\t\tidCardWiSum <span class="token operator">+=</span> idCard<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> idCardWi<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>\n\t\t\t<span class="token punctuation">}</span>\n\n\t\t\t<span class="token keyword">var</span> idCardMod <span class="token operator">=</span> idCardWiSum <span class="token operator">%</span> <span class="token number">11</span><span class="token punctuation">;</span><span class="token comment">// 计算出校验码所在数组的位置</span>\n\t\t\t<span class="token keyword">var</span> idCardLast <span class="token operator">=</span> idCard<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">17</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 得到最后一位身份证号码</span>\n\n\t\t\t<span class="token comment">// 如果等于2，则说明校验码是10，身份证号码最后一位应该是X</span>\n\t\t\t<span class="token keyword">if</span> <span class="token punctuation">(</span>idCardMod <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t\t\t<span class="token keyword">if</span> <span class="token punctuation">(</span>idCardLast <span class="token operator">==</span> <span class="token string">&quot;X&quot;</span> <span class="token operator">||</span> idCardLast <span class="token operator">==</span> <span class="token string">&quot;x&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t\t\t\t<span class="token comment">//alert(&quot;恭喜通过验证啦！&quot;);</span>\n\t\t\t\t\t<span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n\t\t\t\t<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n\t\t\t\t\t<span class="token comment">//alert(&quot;身份证号码错误！&quot;);</span>\n\t\t\t\t\t<span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n\t\t\t\t<span class="token punctuation">}</span>\n\t\t\t<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n\t\t\t\t<span class="token comment">// 用计算出的验证码与最后一位身份证号码匹配，如果一致，说明通过，否则是无效的身份证号码</span>\n\t\t\t\t<span class="token keyword">if</span> <span class="token punctuation">(</span>idCardLast <span class="token operator">==</span> idCardY<span class="token punctuation">[</span>idCardMod<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t\t\t\t<span class="token comment">//alert(&quot;恭喜通过验证啦！&quot;);</span>\n\t\t\t\t\t<span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n\t\t\t\t<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n\t\t\t\t\t<span class="token comment">//alert(&quot;身份证号码错误！&quot;);</span>\n\t\t\t\t\t<span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n\t\t\t\t<span class="token punctuation">}</span>\n\t\t\t<span class="token punctuation">}</span>\n\t\t<span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>\n\t\t\t<span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n\t\t<span class="token punctuation">}</span>\n\t<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n\t\t<span class="token comment">//alert(&quot;身份证格式不正确!&quot;);</span>\n\t\t<span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br></div></div><h2 id="使用案例" tabindex="-1"><a class="header-anchor" href="#使用案例" aria-hidden="true">#</a> 使用案例</h2><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span>isPhone<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./rule&#39;</span>\n\n\n<span class="token function">isPhone</span><span class="token punctuation">(</span><span class="token number">13323232</span><span class="token punctuation">)</span> <span class="token comment">//不是手机号返回 false  是返回true</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div>',5))}]])},3744:(n,s)=>{s.Z=(n,s)=>{const a=n.__vccOpts||n;for(const[n,p]of s)a[n]=p;return a}}}]);