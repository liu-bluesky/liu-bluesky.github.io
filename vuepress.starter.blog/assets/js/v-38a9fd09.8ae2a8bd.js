"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[6387],{8160:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-38a9fd09",path:"/page/js/algorithm/formAssignment.html",title:"form表单多维数组传值",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"原数据",slug:"原数据",children:[]},{level:2,title:"目标数据",slug:"目标数据",children:[]},{level:2,title:"案例",slug:"案例",children:[]}],filePathRelative:"page/js/algorithm/formAssignment.md",git:{updatedTime:1637576909e3,contributors:[{name:"liu-bluesky",email:"229236940@qq.com",commits:2}]}}},9981:(n,s,a)=>{a.r(s),a.d(s,{default:()=>e});var p=a(6252);const t={},e=(0,a(3744).Z)(t,[["render",function(n,s){return s[0]||(s[0]=(0,p.uE)('<h1 id="form表单多维数组传值" tabindex="-1"><a class="header-anchor" href="#form表单多维数组传值" aria-hidden="true">#</a> form表单多维数组传值</h1><h2 id="原数据" tabindex="-1"><a class="header-anchor" href="#原数据" aria-hidden="true">#</a> 原数据</h2><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>\n    <span class="token string-property property">&#39;a.b.c&#39;</span><span class="token operator">:</span><span class="token number">111</span><span class="token punctuation">,</span>\n    <span class="token comment">// &#39;c&#39;:2,</span>\n    <span class="token string-property property">&#39;a.b.d&#39;</span><span class="token operator">:</span><span class="token number">3</span><span class="token punctuation">,</span>\n    <span class="token string-property property">&#39;date.name&#39;</span><span class="token operator">:</span><span class="token string">&#39;ceso&#39;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="目标数据" tabindex="-1"><a class="header-anchor" href="#目标数据" aria-hidden="true">#</a> 目标数据</h2><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code> <span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token number">111</span><span class="token punctuation">,</span> <span class="token literal-property property">d</span><span class="token operator">:</span> <span class="token number">3</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">date</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;ceso&#39;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="案例" tabindex="-1"><a class="header-anchor" href="#案例" aria-hidden="true">#</a> 案例</h2><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>\n    <span class="token string-property property">&#39;a.b.c&#39;</span><span class="token operator">:</span><span class="token number">111</span><span class="token punctuation">,</span>\n    <span class="token comment">// &#39;c&#39;:2,</span>\n    <span class="token string-property property">&#39;a.b.d&#39;</span><span class="token operator">:</span><span class="token number">3</span><span class="token punctuation">,</span>\n    <span class="token string-property property">&#39;date.name&#39;</span><span class="token operator">:</span><span class="token string">&#39;ceso&#39;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">var</span> deepExtend <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;deep-extend&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//这个是写好的插件</span>\ndeepExtend1<span class="token comment">//是本人简化版本的 不是特别严谨但是能用 </span>\n\n<span class="token keyword">let</span> arrvalue <span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>\n<span class="token keyword">let</span> arrkey <span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>\n<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">const</span> element <span class="token operator">=</span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>\n        arrkey<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n        arrvalue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">let</span> newObjArr <span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>\n<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> index <span class="token operator">&lt;</span> arrkey<span class="token punctuation">.</span>length<span class="token punctuation">;</span> index<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> element <span class="token operator">=</span> arrkey<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token comment">// console.log(&#39;element :&gt;&gt; &#39;, element);</span>\n    <span class="token keyword">let</span> arrsss <span class="token operator">=</span>element<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">obj<span class="token punctuation">,</span>currentValue<span class="token punctuation">,</span>c<span class="token punctuation">,</span>Arr</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>\n        <span class="token keyword">let</span> objNew <span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">}</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n            obj<span class="token punctuation">[</span>currentValue<span class="token punctuation">]</span> <span class="token operator">=</span>arrvalue<span class="token punctuation">[</span>index<span class="token punctuation">]</span>\n            objNew <span class="token operator">=</span> obj\n        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>\n            <span class="token keyword">let</span> objs<span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n            objs<span class="token punctuation">[</span>currentValue<span class="token punctuation">]</span> <span class="token operator">=</span> obj\n            objNew <span class="token operator">=</span>  objs\n        <span class="token punctuation">}</span>\n        <span class="token keyword">return</span>  objNew\n    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>  \n    newObjArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arrsss<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">let</span> arr <span class="token operator">=</span> newObjArr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">obj<span class="token punctuation">,</span>currentValue<span class="token punctuation">,</span>c<span class="token punctuation">,</span>Arr</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>\n    <span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        obj <span class="token operator">=</span> currentValue\n        <span class="token keyword">return</span> obj\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> <span class="token function">deepExtend1</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span>currentValue<span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>  \n<span class="token keyword">function</span> <span class="token function">deepExtend1</span><span class="token punctuation">(</span><span class="token parameter">obj1<span class="token punctuation">,</span>obj2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> target <span class="token operator">=</span> obj1\n    Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>obj2<span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">key</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> target<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">&#39;object&#39;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n            <span class="token function">deepExtend1</span><span class="token punctuation">(</span>target<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">,</span>obj2<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span>\n            <span class="token keyword">return</span>\n        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>target<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n            target<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token operator">=</span>obj2<span class="token punctuation">[</span>key<span class="token punctuation">]</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">else</span> <span class="token punctuation">{</span>\n            <span class="token function">deepExtend1</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>obj2<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span>\n            <span class="token keyword">return</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token keyword">return</span> target\n<span class="token punctuation">}</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br></div></div>',7))}]])},3744:(n,s)=>{s.Z=(n,s)=>{const a=n.__vccOpts||n;for(const[n,p]of s)a[n]=p;return a}}}]);