System.register(["./vue-legacy.DLvkimME.js","./vue-router-legacy.D6MJ89Gz.js","./@vue-legacy.wX-ntIMg.js","./file-saver-legacy.BjvD2PTr.js","./html-to-image-legacy.ExDT8R_3.js","./index-legacy.Cahy7zXi.js","./ace-builds-legacy.CeUfEwnB.js","./vuex-legacy.DcjacnyB.js","./path-browserify-legacy.Bz6KLGVb.js","./@vueuse-legacy.D0fwEmGo.js","./axios-legacy._wDLtYbU.js","./js-cookie-legacy.DG9X5X6R.js","./element-plus-legacy.Bn3TXEuQ.js","./lodash-es-legacy.DhJsfqAD.js","./@element-plus-legacy.ByEY-7rH.js","./@popperjs-legacy.CtArNnFZ.js","./@ctrl-legacy.BxnR6uzU.js","./dayjs-legacy.Ct_fdRRT.js","./async-validator-legacy.DmN8ALBH.js","./memoize-one-legacy.BFFEFRop.js","./normalize-wheel-es-legacy.BGuSd53u.js","./@floating-ui-legacy.DrPNJd52.js","./nprogress-legacy.DoK-y1pE.js","./animate.css-legacy.BfzBEcwY.js","./element-easy-form-legacy.CTBGSH2R.js","./mockjs-legacy.f5ttm7Vm.js","./vuedraggable-legacy.90WDJwJF.js","./sortablejs-legacy.tfgKSJed.js","./vue3-ace-editor-legacy.1GmseHPH.js","./resize-observer-polyfill-legacy.0iJwNYH9.js","./uuid-legacy.8hFDIvAG.js"],(function(n,e){"use strict";var t,a,o,i,r,s,l,p,c,d,h,m,u,f,g,x,y,v,b,S,w,C;return{setters:[null,n=>{t=n.u,a=n.a},n=>{o=n.d,i=n.r,r=n.bS,s=n.bT,l=n.v,p=n.f,c=n.h,d=n.o,h=n.c,m=n.i,u=n.j,f=n.u,g=n.bU,x=n.bV,y=n.a,v=n.m,b=n.bW},n=>{S=n.F},n=>{w=n.t},n=>{C=n._},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],execute:function(){var e=document.createElement("style");e.textContent=".renderEchartsEdit[data-v-be11eec2]{width:100%;height:calc(100vh - 114px);position:relative}.renderEchartsEdit .repl[data-v-be11eec2]{width:100%;height:100%}.renderEchartsEdit .renderEcharts[data-v-be11eec2]{position:absolute;right:30px;bottom:20px}\n",document.head.appendChild(e);const M=`\n \n  <template>\n  <div\n    class="content"\n    :style="{\n      height: height,\n      width: width,\n    }"\n  >\n    <div id="huikuan-echarts"></div>\n  </div>\n</template>\n\n<script setup>\nimport { ref, reactive, onMounted } from "vue";\nimport "echarts";\nconst props = defineProps({\n  width: {\n    //列数据\n    type: String,\n    default: "930px",\n  },\n  height: {\n    type: String,\n    default: "492px",\n  },\n});\nonMounted(() => {\n  getEcharts();\n});\n\nconst getEcharts = () => {\n //展示数据\nconst optionData = [];\n//扇形图颜色数据\nconst colorList = [\n   { color1: '#E2698D', color2: '#A94E6D' },\n    { color1: '#DE7110', color2: '#FECD70' },\n    { color1: '#D09F08', color2: '#F7CB45' },\n      { color1: '#238483', color2: '#55C27C' },\n   { color1: '#45EAFF', color2: '#40AFAF' },\n      { color1: '#12B3F8', color2: '#7DE8FF' },\n     { color1: '#0176D3', color2: '#13B7FF' },\n];\n//请求的数据\nconst resultData = [\n   {\n      name: '罗汉松',\n      value: 95,\n      percent: '8.05'\n   },\n   {\n      name: '四季桂',\n      value: 120,\n      percent: '10.17'\n   },\n   {\n      name: '马齿笕',\n      value: 98,\n      percent: '8.31'\n   },\n   {\n      name: '青江藤',\n      value: 90,\n      percent: '7.63'\n   },\n   {\n      name: '麻竹',\n      value: 100,\n      percent: '8.48'\n   },\n   {\n      name: '鸭舌草',\n      value: 97,\n      percent: '8.22'\n   },\n   {\n      name: '金鱼藻',\n      value: 100,\n      percent: '8.47'\n   },\n \n];\nlet sum = 0;\nresultData.forEach(item => {\n   sum += item.value;\n})\nresultData.forEach(item => {\n   optionData.push({ value: item.value, name: item.name });\n   optionData.push({ name: '', value: sum / 100, itemStyle: { color: 'transparent' } });\n})\n\n  let myChart = echarts.init(document.getElementById("huikuan-echarts"));\n  let option = {\n   //你的代码\n   legend: [\n      {\n        show:false,\n         orient: 'vertical',\n         right: '10%',\n         top: '10%',\n         itemGap: 30,\n         textStyle: {\n            color: '#ffffff',\n            fontSize: 12,\n            rich: {\n               name: {\n                  width: 80,\n                  fontSize: 16,\n               },\n               value: {\n                  width: 20,\n                  fontSize: 16,\n                  padding: [0, 0, 0, 50]\n               },\n               percent: {\n                  width: 10,\n                  fontSize: 16,\n               },\n            },\n         },\n         data: resultData,\n         formatter: (name) => {\n            if (resultData.length) {\n               const item = resultData.filter((item) => item.name === name)[0];\n               return \`{name|\${name}}{value| \${item.percent}%}{value| \${item.value}km²}\`;\n            }\n         },\n      },\n   ],\n   tooltip: {\n    show:false,\n      trigger: 'item',\n      formatter(params) {\n         let res = '';\n         const { marker, name, value } = params;\n         if (name !== '') {\n            res += \`\${marker}${name}:\${value}Km²\`\n         }\n         return res;\n      }\n   },\n   grid:{\n  \n   },\n   series: [\n      {\n         type: 'pie',\n         roseType: 'radius',\n         radius: ['20%', '60%'],\n         center: ['50%', '50%'],\n               label: {\n          textStyle: {\n            fontSize: 16,\n            color: "#fff",\n          },\n          formatter: function(params) {\n            console.log(params)\n            return \`{a|\${params.name}}\n{b|\${params.value}个(\${params.percent}%)}\`;\n          },\n          rich: {\n            a: {\n              color: "rgba(211, 228, 254, 1)",\n              fontSize: 16,\n              align: "center",\n              lineHeight: 25,\n              fontWeight: 600,\n            }, \n            b: {\n              color: "inherit",\n              fontSize: 16,\n              align: "center",\n              lineHeight: 25,\n              fontWeight: 600,\n            },\n          },\n        },\n         labelLine: {\n            show: true,\n         },\n         itemStyle: {\n            normal: {\n               color(params) {\n                  return colorList[parseInt(params.dataIndex / 2)].color1;\n               }\n            }\n         },\n         z: 3,\n         data: optionData,\n      },\n      {\n         type: 'pie',\n         roseType: 'radius',\n         radius: ['20%', '62%'],\n         center: ['50%', '50%'],\n         label: {\n            show: false,\n         },\n         labelLine: {\n            show: false,\n         },\n         itemStyle: {\n            normal: {\n               color(params) {\n                  return colorList[parseInt(params.dataIndex / 2)].color2;\n               }\n            }\n         },\n         z: 2,\n         data: optionData,\n      }\n   ]\n}\n  myChart.setOption(option);\n};\nconst count = ref(0);\n<\/script>\n\n<style scoped>\n.content {\n  position: relative;\n  background-color: #022b66;\n  box-shadow: 0px 3px 50px 1px rgba(0, 101, 175, 0.4);\n  border: 1px solid rgba(19, 127, 212, 0.6);\n}\n#huikuan-echarts {\n  width: 100%;\n  height: 100%;\n}\n</style>\n\n  \n  `,D=Object.freeze(Object.defineProperty({__proto__:null,FunnelPlot1:"\n\n    <template>\n    <div\n      class=\"content\"\n   \n    >\n     <div :ref=\"echartsMap\" id=\"mainChina\"></div>\n    </div>\n  </template>\n  \n  <script setup>\n  import { ref, reactive, nextTick, onMounted, watch } from \"vue\";\n  import \"echarts\";\n  \n  const state = reactive({\n    option:  {\n\n       \n        \"legend\": {\n           show:false\n        },\n        \"grid\": {\n            \"top\": \"24%\",\n            left:\"10\"\n        },\n        series: [\n            {\n                name: '',\n                type: 'funnel',\n                left: '0',\n                width: '40%',\n                minSize: 84,\n                maxSize: 260,\n                label: {\n               \n                              formatter: function(params) {\n                                console.log(params)\n                        return '{a| '+params.name+'} {b| '+params.value+'个 ('+params.percent+'%)}';\n                      },\n                      rich: {\n                        a: {\n                          color: \"rgba(211, 228, 254, 1)\",\n                          fontSize: 16,\n                          align: \"center\",\n                          lineHeight: 25,\n                          fontWeight: 600,\n                        }, \n                        b: {\n                          color: \"rgba(0, 205, 222, 1)\",\n                          fontSize: 16,\n                          align: \"center\",\n                          lineHeight: 25,\n                          fontWeight: 600,\n                        },\n                      },\n                    emphasis: {\n                        position:'left',\n                        formatter: '{c}%'\n                    },\n                \n                },\n                labelLine: {\n                    normal: {\n                        length: 200,\n                        position: 'left',\n                        \n                        lineStyle: {\n                            width:1\n                            \n                        }\n                    }\n                },\n                itemStyle: {\n                  opacity:1,\n                     borderWidth: 0,\n                    shadowBlur: 5,\n                    shadowOffsetX: 0,\n                    shadowOffsetY:  2,\n                    shadowColor: 'rgba(0, 0, 0, 0.5)'\n                },\n                data: [\n                    {value:30, name: '访问', \n                        itemStyle: {\n                            normal: {\n                                color: 'rgba(62, 230, 227, 1)'\n                            }\n                        },\n                       labelLine:{\n                           normal: {\n                               lineStyle: {\n                                   shadowColor: 'rgba(62, 230, 227, 1)',\n                                   shadowOffsetX: 1\n                               }\n                           }\n                       }\n                    },\n                    {value: 25, name: '咨询',\n                         itemStyle: {\n                            normal: {\n                                color: 'rgba(59, 188, 217, 1)'\n                            }\n                        },\n                         labelLine:{\n                           normal: {\n                               lineStyle: {\n                                   shadowColor: 'rgba(59, 188, 217, 1)',\n                                   shadowOffsetX: 1\n                               }\n                           }\n                       }\n                    },\n                    {value: 15, name: '订单',\n                         itemStyle: {\n                            normal: {\n                                color: 'rgba(55, 139, 204, 1)'\n                            }\n                        },\n                         labelLine:{\n                           normal: {\n                               lineStyle: {\n                                   shadowColor: 'rgba(55, 139, 204, 1)',\n                                   shadowOffsetX: 1\n                               }\n                           }\n                       }\n                    },\n                    {value: 15, name: '点击',\n                         itemStyle: {\n                            normal: {\n                                color: 'rgba(55, 139, 204, 1)'\n                            }\n                        },\n                         labelLine:{\n                           normal: {\n                               lineStyle: {\n                                   shadowColor: 'rgba(55, 139, 204, 1)',\n                                   shadowOffsetX: 1\n                               }\n                           }\n                       }\n                    },\n                    {value: 10, name: '展现',\n                         itemStyle: {\n                            normal: {\n                                color: 'rgba(52, 80, 191, 1)'\n                            }\n                        },\n                         labelLine:{\n                           normal: {\n                               lineStyle: {\n                                   shadowColor: 'rgba(52, 80, 191, 1)',\n                                   shadowOffsetX: 1\n                               }\n                           }\n                       }\n                    }\n                ]\n            },\n            {\n                name: '',\n                type: 'funnel',\n                top:0,\n                gap: 10,\n                label: {\n                    normal: {\n                        position: 'inside',\n                        formatter: '转化率：({c}%)',\n                        textStyle: {\n                            color: '#fff'\n                        }\n                    }\n                  \n                },\n                labelLine: {\n                    normal: {\n                      \n                \n                    }\n                },\n                itemStyle: {\n                    normal: {\n                        color: 'transparent',\n                        borderWidth:0,\n                        opacity: 0\n                    }\n                },\n                data: [\n                    {value: 60, name: '访问'\n                \n                    },\n                    {value: 40, name: '咨询'},\n                    {value: 20, name: '订单'},\n                    {value: 80, name: '点击'},\n                    {value: 100, name: '展现'}\n                ]\n            }\n        ]\n    }\n    \n  });\n  let echartsMapel = ref(\"\");\n  let opt = null;\n  const echartsMap = (e) => (echartsMapel.value = e);\n  const init = () => {\n    let myChart = echarts.init(echartsMapel.value);\n    myChart.setOption(state.option);\n    const setOption = (dataObj) => {\n      let opt = myChart.getOption();\n      Object.assign(opt, dataObj);\n      myChart.setOption(opt);\n    };\n    return setOption;\n  };\n  \n  onMounted(() => {\n    init();\n  });\n  <\/script>\n  \n  <style scoped >\n  .content {\n    position: relative;\n    width: 100%;\n    box-shadow: 0px 3px 50px 1px rgba(0, 101, 175, 0.4);\n  }\n  #mainChina {\n    width: 100%;\n    height: 600px;\n    background-color: #00184F;\n  }\n  </style>\n  \n  \n    \n    ",FunnelPlot2:'\n\n    \n\n    <template>\n    <div\n      class="content"\n   \n    >\n     <div :ref="echartsMap" id="mainChina"></div>\n    </div>\n  </template>\n  \n  <script setup>\n  import { ref, reactive, nextTick, onMounted, watch } from "vue";\n  import "echarts";\n  const data = [\n                    {value: 20, name: \'name1\'\n                \n                    },\n                    {value: 40, name: \'name2\'},\n                    {value: 60, name: \'name3\'},\n                    {value: 80, name: \'name4\'},\n                    {value: 100, name: \'name5\'}\n                ]\n  const state = reactive({\n    option:  {\n\n       color:["rgba(3, 28, 255, 1)","rgba(3, 72, 255, 1)","rgba(3, 129, 255, 1)","rgba(3, 171, 255, 1)"\n    ,"rgba(3, 221, 255, 1)"],\n        "legend": {\n           show:false\n        },\n        "grid": {\n            "top": "24%",\n            left:"10"\n        },\n        series: [\n            {\n        name: "",\n        type: "funnel",\n           min: 0,\n         max: 100,\n         sort: \'ascending\', //金字塔形:\'ascending\', 漏斗图形:\'descending\'\n         type: \'funnel\',\n         left: \'15%\',\n         top: 40,\n           width: \'30%\',\n        label: {\n          formatter: function(params) {\n            console.log(params);\n            return (\n              "{a| " +\n              params.name +\n              "} {b| " +\n              params.value +\n              "个 (" +\n              params.percent +\n              "%)}"\n            );\n          },\n          rich: {\n            a: {\n              color: "rgba(211, 228, 254, 1)",\n              fontSize: 16,\n              align: "center",\n              lineHeight: 25,\n              fontWeight: 600,\n            },\n            b: {\n              color: "rgba(0, 205, 222, 1)",\n              fontSize: 16,\n              align: "center",\n              lineHeight: 25,\n              fontWeight: 600,\n            },\n          },\n          emphasis: {\n            position: "left",\n            formatter: "{c}%",\n          },\n        },\n        labelLine: {\n          normal: {\n            length: 200,\n            position: "left",\n\n            lineStyle: {\n              width: 1,\n            },\n          },\n        },\n        itemStyle: {\n          opacity: 1,\n          borderWidth: 0,\n          shadowBlur: 5,\n          shadowOffsetX: 0,\n          shadowOffsetY: 2,\n          shadowColor: "rgba(0, 0, 0, 0.5)",\n        },\n   data:data\n      },\n      {\n        data,\n        name: "",\n        type: "funnel",\n        top: 0,\n        gap: 10,\n        label: {\n          normal: {\n            position: "inside",\n            formatter: "转化率：({c}%)",\n            textStyle: {\n              color: "#fff",\n            },\n          },\n        },\n        labelLine: {\n          normal: {},\n        },\n        itemStyle: {\n          normal: {\n            color: "transparent",\n            borderWidth: 0,\n            opacity: 0,\n          },\n        },\n      \n      },\n        ]\n    }\n    \n  });\n  let echartsMapel = ref("");\n  let opt = null;\n  const echartsMap = (e) => (echartsMapel.value = e);\n  const init = () => {\n    let myChart = echarts.init(echartsMapel.value);\n    myChart.setOption(state.option);\n    const setOption = (dataObj) => {\n      let opt = myChart.getOption();\n      Object.assign(opt, dataObj);\n      myChart.setOption(opt);\n    };\n    return setOption;\n  };\n  \n  onMounted(() => {\n    init();\n  });\n  <\/script>\n  \n  <style scoped >\n  .content {\n    position: relative;\n    width: 100%;\n    box-shadow: 0px 3px 50px 1px rgba(0, 101, 175, 0.4);\n  }\n  #mainChina {\n    width: 100%;\n    height: 600px;\n    background-color: #00184F;\n  }\n  </style>\n  \n  \n    \n    \n    \n    ',Pie1:'\n  <template>\n  <div\n    class="content"\n    :style="{\n      height: height,\n      width: width,\n    }"\n  >\n    <div id="huikuan-echarts"></div>\n  </div>\n</template>\n\n<script setup>\nimport { ref, reactive, onMounted } from "vue";\nimport "echarts";\nconst props = defineProps({\n  width: {\n    //列数据\n    type: String,\n    default: "930px",\n  },\n  height: {\n    type: String,\n    default: "492px",\n  },\n});\nonMounted(() => {\n  getEcharts();\n});\nconst state = reactive({\n  huikuna: {\n    weihuikuan_yidaoqi: 125, //已到期\n    weihuikuan_weidaoqi: 125, //未到期\n    yihuikuan: 750, //已回款\n  },\n});\nconst getEcharts = () => {\n  let data = [\n    {\n      value: state.huikuna.weihuikuan_yidaoqi,\n      name: "已到期",\n    },\n    {\n      value: state.huikuna.weihuikuan_weidaoqi,\n      name: "未到期",\n    },\n    {\n      value: state.huikuna.yihuikuan,\n      name: "已回款金额",\n      labelLine: {\n        lineStyle: {\n          width: 0,\n        },\n      },\n    },\n  ];\n  let weihuikuanAll =\n    state.huikuna.weihuikuan_yidaoqi + state.huikuna.weihuikuan_weidaoqi;\n\n  let myChart = echarts.init(document.getElementById("huikuan-echarts"));\n  let option = {\n    color: ["#F486B9", "#617DFB", "#173667", "#FDCE34", "#0099F9", "#fa8c35"],\n    tooltip: {\n      show: false,\n      backgroundColor: "#02132fC9",\n      borderColor: "#0D97E460",\n      textStyle: {\n        fontSize: 16,\n        color: "#DCDCDC",\n      },\n      formatter: (params) => {},\n    },\n\n    series: [\n      {\n        name: "",\n        type: "pie",\n        startAngle: 45, \n        center: ["35%", "50%"],\n        radius: ["55%", "75%"],\n        avoidLabelOverlap: false,\n       \n        label: {\n          textStyle: {\n            fontSize: 16,\n            color: "#fff",\n          },\n          formatter: function(params) {\n            let vv = \'a\';\n            if (params.dataIndex === 2) {\n              return \'\';\n            } else if (params.dataIndex === 0) {\n              vv = \'a\';\n            } else if (params.dataIndex === 1) {\n              vv = \'b\';\n            }\n            let str = \'{\' + vv + \'|\';\n            str += params.name + \'\\n\' + params.value + \'万 \' + parseFloat(((params\n              .value / (\n                weihuikuanAll)) * 100).toFixed(2)) + \'%\';\n            str += \'}\';\n            return str;\n          },\n          rich: {\n            a: {\n              color: "#F486B9",\n              fontSize: 16,\n              align: "center",\n              lineHeight: 25,\n              fontWeight: 600,\n            }, \n            b: {\n              color: "#617DFB",\n              fontSize: 16,\n              align: "center",\n              lineHeight: 25,\n              fontWeight: 600,\n            },\n          },\n        },\n        data: data,\n      },\n      {\n        name: "",\n        type: "pie",\n        startAngle: 45, // 这里将起始角度设置为180度\n        selectedMode: "single",\n        center: ["35%", "50%"],\n        radius: [0, "45%"],\n        label: {\n          position: "inner",\n          textStyle: {\n            fontSize: 14,\n            color: "#fff",\n            lineHeight: 20,\n          },\n          formatter: (params) => {\n            return params.name + \n            "\\n" +\n             params.value +"万"+\n            "\\n" +\n             params.percent + "%";\n             \n                },\n        },\n\n        data: [\n          {\n            value:\n              state.huikuna.weihuikuan_weidaoqi +\n              state.huikuna.weihuikuan_yidaoqi,\n            name: "未回款",\n          },\n          {\n            value: state.huikuna.yihuikuan,\n            name: "已回款",\n          },\n        ],\n      },\n    ],\n  };\n  myChart.setOption(option);\n};\nconst count = ref(0);\n<\/script>\n\n<style scoped>\n.content {\n  position: relative;\n  background-color: #022b66;\n  box-shadow: 0px 3px 50px 1px rgba(0, 101, 175, 0.4);\n  border: 1px solid rgba(19, 127, 212, 0.6);\n}\n#huikuan-echarts {\n  width: 100%;\n  height: 100%;\n}\n</style>\n\n  ',Pie2:M,Pie3:"\n \n \n  <template>\n  <div\n    class=\"content\"\n    :style=\"{\n      height: height,\n      width: width,\n    }\"\n  >\n    <div id=\"huikuan-echarts\"></div>\n  </div>\n</template>\n\n<script setup>\nimport { ref, reactive, onMounted } from \"vue\";\nimport \"echarts\";\nconst props = defineProps({\n  width: {\n    //列数据\n    type: String,\n    default: \"930px\",\n  },\n  height: {\n    type: String,\n    default: \"492px\",\n  },\n});\nonMounted(() => {\n  getEcharts();\n});\n\nconst getEcharts = () => {\nconst colorList1 = ['#00e4ff', '', '#1f77ee', '', '#f7b31d', '',]\nconst colorList2 = ['#0db0c3', '', '#0e51ab', '', '#ab7a0e', '',]\nconst colorList3 = ['#098c9c', '', '#084290', '', '#906508', '',]\nlet total = 0\nlet dataList = []\nconst moduleContent = { '村务': 204, '财务': 310, '党务': 84 }\nlet sum = 0\nconst chartdata = []\nfor (const i in moduleContent) {\n   chartdata.push({\n      name: i,\n      value: moduleContent[i] || 1\n   })\n   sum += Number(moduleContent[i] || 0)\n}\ntotal = sum\ndataList = chartdata\nconst data1 = []\nchartdata.forEach((item) => {\n   const _item = { ...item }\n   if (!_item.value) {\n      _item.value = sum / 100\n   }\n   data1.push(_item, {\n      name: '',\n      value: sum / 100,\n      label: { show: false },\n      itemStyle: {\n         color: 'transparent'\n      }\n   })\n})\n\n  let myChart = echarts.init(document.getElementById(\"huikuan-echarts\"));\n  let option ={\n   backgroundColor: '#00266b',\n   title: {\n      text: '608',\n      subtext: `总数`,\n      top: '46%',\n      left: 'center',\n      itemGap: 15,\n      textStyle: {\n         color: '#ffffff',\n         fontSize: 30,\n         fontWeight: 400\n      },\n      subtextStyle: {\n         color: 'rgba(211, 228, 254, 1)',\n         fontSize: 14,\n         fontWeight: 400\n      }\n   },\n   series: [\n      {\n         type: 'pie',\n         radius: ['45%', '60%'],\n         center: ['50%', '50%'],\n         minAngle: 5,\n         labelLine: {\n            show: false\n         },\n         label: {\n            show: true,\n            alignTo: 'labelLine',\n            position: 'outside',\n\n            rich: {\n               name: {\n                  color: '#ffffff',\n                  fontSize: 12,\n                  fontWeight: 400,\n                  padding: [0, 0, 0, 10]\n               },\n               zb: {\n                  color: '#fff',\n                  fontWeight: 400,\n                  fontSize: 12,\n                  align: 'left',\n                  padding: [14, 0, 0, 24]\n               },\n               dot: {\n                  backgroundColor: 'auto',\n                  width: 14,\n                  height: 14,\n                  padding: [0, 0, 0, 0],\n                  verticalAlign: 'top'\n               }\n            },\n            formatter: (params) => {\n               const x = params.dataIndex\n               return '{dot|}' + '{name|' + params.data.name + '}' + '\\n' + '{zb|' + params.data.value + '}'\n            }\n         },\n         itemStyle: {\n            normal: {\n               color: function (params) {\n                  return colorList1[params.dataIndex]\n               }\n            }\n         },\n         data: data1,\n         z: 666\n      },\n      {\n         type: 'pie',\n         radius: ['45%', '35%'],\n         center: ['50%', '50%'],\n         hoverAnimation: false,\n         minAngle: 5,\n         emphasis: { scale: false },\n         label: {\n            show: false\n         },\n         itemStyle: {\n            normal: {\n               color: function (params) {\n                  return colorList2[params.dataIndex]\n               }\n            }\n         },\n         data: data1,\n         z: 1\n      },\n      {\n         type: 'pie',\n         radius: ['25%', '35%'],\n         center: ['50%', '50%'],\n         hoverAnimation: false,\n         minAngle: 5,\n         emphasis: { scale: false },\n         label: {\n            show: false\n         },\n         itemStyle: {\n            normal: {\n               color: function (params) {\n                  return colorList3[params.dataIndex]\n               }\n            }\n         },\n         data: data1,\n         z: 1\n      }\n   ]\n}\n\n  myChart.setOption(option);\n};\nconst count = ref(0);\n<\/script>\n\n<style scoped>\n.content {\n  position: relative;\n  background-color: #022b66;\n  box-shadow: 0px 3px 50px 1px rgba(0, 101, 175, 0.4);\n  border: 1px solid rgba(19, 127, 212, 0.6);\n}\n#huikuan-echarts {\n  width: 100%;\n  height: 100%;\n}\n</style>\n\n  \n  \n  \n  ",Pie3D1:'\n  <template>\n  <div\n    class="content"\n    :style="{\n      height: height,\n      width: width,\n    }"\n  >\n    <img src="/vue.example/dizuo.png" class="dizuo" alt="" />\n    <div id="container"></div>\n  </div>\n</template>\n\n<script setup>\nimport { ref, reactive, onMounted } from "vue";\nimport { getSeriesPie3D, getParametricEquation } from "./tool";\nimport "echarts";\nimport "echarts-gl";\nconst props = defineProps({\n  width: {\n    //列数据\n    type: String,\n    default: "930px",\n  },\n  height: {\n    type: String,\n    default: "492px",\n  },\n});\nonMounted(() => {\n  getEcharts();\n});\nconst getEcharts = () => {\n  let selectedIndex = "";\n  let hoveredIndex = "";\n  // 传入数据生成 option\n  let data = [\n    {\n      name: "预付款",\n      value: 925,\n      itemStyle: {\n        color: "#02A4F4",\n      },\n    },\n    {\n      name: "其他款项",\n      value: 200,\n      itemStyle: {\n        color: "#43DEDC",\n      },\n    },\n  ];\n  let series = getSeriesPie3D({\n    pieData: data,\n    internalDiameterRatio: 0,\n    bottomk: 0,\n    pieHeight: 10,\n  });\n  let option = {\n    \n    fontFamily: "Source Han Sans CN",\n    legend: {\n      show: true,\n      bottom: 10,\n      itemHeight: 14,\n      itemWidth: 24,\n      itemGap: 30,\n      textStyle: {\n        color: "#D3E4FE",\n        fontSize: 12,\n        fontWeight: "400",\n      },\n      data: data,\n    },\n    tooltip: {\n      formatter: (params) => {\n        if (params.seriesName !== "mouseoutSeries") {\n          return params.seriesName+"<br/><span style=\'display:inline-block;margin-right:5px;border-radius:10px;width:10px;height:10px;background-color:"+params.color+";\'></span>"+ series[params.seriesIndex].pieData.value;\n        }\n      },\n    },\n    xAxis3D: {\n      min: -1,\n      max: 1,\n    },\n    yAxis3D: {\n      min: -1,\n      max: 1,\n    },\n    zAxis3D: {\n      min: -1,\n      max: 1,\n    },\n\n    grid3D: {\n      show: false,\n      boxHeight: 15,\n      height: "100%",\n      width: "100%",\n      //  postEffect:{\n      //   enable:true\n      //  },\n      viewControl: {\n        //3d效果可以放大、旋转等，请自己去查看官方配置\n        alpha: 25,\n        // 饼块开始得角度\n        beta: -10,\n        rotateSensitivity: 1,\n        zoomSensitivity: 0,\n        panSensitivity: 0,\n        autoRotate: false,\n        distance: 500,\n        autoRotateSpeed: 10,\n        autoRotateAfterStill: 10,\n      },\n    },\n    series: series,\n  };\n  //构建3d饼状图\n  let myChart = echarts.init(document.getElementById("container"));\n  // 传入数据生成 option\n  // myChart.setOption(option);\n  // 监听 mouseover，近似实现高亮（放大）效果\n  myChart.on("click", function (params) {\n    // 准备重新渲染扇形所需的参数\n    let isSelected;\n    let isHovered;\n    let startRatio;\n    let endRatio;\n    let k;\n    let i;\n\n    // 如果触发 mouseover 的扇形当前已高亮，则不做操作\n    if (hoveredIndex === params.seriesIndex) {\n      return;\n\n      // 否则进行高亮及必要的取消高亮操作\n    } else {\n      // 如果当前有高亮的扇形，取消其高亮状态（对 option 更新）\n      if (hoveredIndex !== "") {\n        // 从 option.series 中读取重新渲染扇形所需的参数，将是否高亮设置为 false。\n        // isSelected = option.series[hoveredIndex].pieStatus.selected;\n        isSelected = false;\n        startRatio = option.series[hoveredIndex].pieData.startRatio;\n        endRatio = option.series[hoveredIndex].pieData.endRatio;\n        k = option.series[hoveredIndex].pieStatus.k;\n        i = 10;\n        // 对当前点击的扇形，执行取消高亮操作（对 option 更新）\n        option.series[hoveredIndex].parametricEquation = getParametricEquation(\n          startRatio,\n          endRatio,\n          isSelected,\n          isHovered,\n          k,\n          i\n        );\n        option.series[hoveredIndex].pieStatus.hovered = isHovered;\n\n        // 将此前记录的上次选中的扇形对应的系列号 seriesIndex 清空\n        hoveredIndex = "";\n      }\n\n      // 如果触发 mouseover 的扇形不是透明圆环，将其高亮（对 option 更新）\n      if (params.seriesName !== "mouseoutSeries") {\n        // 从 option.series 中读取重新渲染扇形所需的参数，将是否高亮设置为 true。\n        // isSelected = option.series[params.seriesIndex].pieStatus.selected;\n        isSelected = true;\n        startRatio = option.series[params.seriesIndex].pieData.startRatio;\n        endRatio = option.series[params.seriesIndex].pieData.endRatio;\n        k = option.series[params.seriesIndex].pieStatus.k;\n\n        // 对当前点击的扇形，执行高亮操作（对 option 更新）\n        option.series[params.seriesIndex].parametricEquation =\n          getParametricEquation(\n            startRatio,\n            endRatio,\n            isSelected,\n            isHovered,\n            k,\n            15\n          );\n        option.series[params.seriesIndex].pieStatus.hovered = isHovered;\n\n        // 记录上次高亮的扇形对应的系列号 seriesIndex\n        hoveredIndex = params.seriesIndex;\n      }\n\n      // 使用更新后的 option，渲染图表\n      myChart.setOption(option);\n    }\n  });\n  // 初始化激活数据\n  const initIndex = 1;\n  // 对当前点击的扇形，执行高亮操作（对 option 更新）\n  option.series[initIndex].parametricEquation = getParametricEquation(\n    option.series[initIndex].pieData.startRatio,\n    option.series[initIndex].pieData.endRatio,\n    true,\n    false,\n    option.series[initIndex].pieStatus.k,\n    15\n  );\n  // 记录上次高亮的扇形对应的系列号 seriesIndex\n  hoveredIndex = initIndex;\n  // 使用更新后的 option，渲染图表\n  myChart.setOption(option);\n  // 修正取消高亮失败的 bug\n  // myChart.on(\'globalout\', function () {\n  //     if (hoveredIndex !== \'\') {\n  //         // 从 option.series 中读取重新渲染扇形所需的参数，将是否高亮设置为 true。\n  //         isSelected = option.series[hoveredIndex].pieStatus.selected;\n  //         isHovered = false;\n  //         k = option.series[hoveredIndex].pieStatus.k;\n  //         startRatio = option.series[hoveredIndex].pieData.startRatio;\n  //         endRatio = option.series[hoveredIndex].pieData.endRatio;\n  //         // 对当前点击的扇形，执行取消高亮操作（对 option 更新）\n  //        i = 10\n  //         option.series[hoveredIndex].parametricEquation = getParametricEquation(\n  //             startRatio,\n  //             endRatio,\n  //             isSelected,\n  //             isHovered,\n  //             k,\n  //             i\n  //         );\n  //         option.series[hoveredIndex].pieStatus.hovered = isHovered;\n\n  //         // 将此前记录的上次选中的扇形对应的系列号 seriesIndex 清空\n  //         hoveredIndex = \'\';\n  //     }\n\n  //     // 使用更新后的 option，渲染图表\n  //     myChart.setOption(option);\n  // });\n};\nconst count = ref(0);\nconst state = reactive({});\n<\/script>\n\n<style scoped >\n.content {\n  position: relative;\n  background-color: #022b66;\n  box-shadow: 0px 3px 50px 1px rgba(0, 101, 175, 0.4);\n  border: 1px solid rgba(19, 127, 212, 0.6);\n}\n#container {\n  width: 100%;\n  height: 100%;\n  position: absolute;\n  left: 0px;\n  top: 0px;\n  z-index: 2;\n}\n.dizuo {\n  z-index: 1;\n  position: absolute;\n  bottom: 106px;\n  left: 50%;\n  width: 443px;\n  height: 151px;\n  transform: translateX(-48%);\n}\n</style>\n\n  \n  ',Pie3D2:'\n  <template>\n  <div\n    class="content"\n    :style="{\n      height: height,\n      width: width,\n    }"\n  >\n    <img src="/vue.example/dizuo.png" class="dizuo" alt="" />\n    <div id="container2"></div>\n  </div>\n</template>\n\n<script setup>\nimport { ref, reactive, onMounted } from "vue";\nimport { getSeriesPie3D, getParametricEquation } from "./tool";\nimport  "echarts";\nimport "echarts-gl";\nconst props = defineProps({\n  width: {\n    //列数据\n    type: String,\n    default: "930px",\n  },\n  height: {\n    type: String,\n    default: "492px",\n  },\n});\nonMounted(() => {\n  getEcharts();\n});\nconst getEcharts = () => {\n  let selectedIndex = "";\n  let hoveredIndex = "";\n  // 传入数据生成 option\n  let data = [\n    {\n      name: "电气维保",\n      value: 25,\n      itemStyle: {\n        color: "#00ADEF",\n      },\n    },\n    {\n      name: "机液维保",\n      value: 20,\n      itemStyle: {\n        color: "#6E67E3",\n      },\n    },{\n      name: "项目经理",\n      value: 25,\n      itemStyle: {\n        color: "#E2698D",\n      },\n    },\n    {\n      name: "操作手",\n      value: 20,\n      itemStyle: {\n        color: "#30B878",\n      },\n    },\n  ];\n  let series = getSeriesPie3D({\n    pieData: data,\n    internalDiameterRatio:0.6,\n    bottomk: 0,\n  });\n  let option = {\n    fontFamily: "Source Han Sans CN",\n    legend: {\n      show: true,\n      bottom: 10,\n      itemHeight: 14,\n      itemWidth: 24,\n      itemGap: 30,\n      textStyle: {\n        color: "#D3E4FE",\n        fontSize: 12,\n        fontWeight: "400",\n      },\n      data: data,\n    },\n    tooltip: {\n      formatter: (params) => {\n        if (params.seriesName !== "mouseoutSeries") {\n          return params.seriesName+"<br/><span style=\'display:inline-block;margin-right:5px;border-radius:10px;width:10px;height:10px;background-color:"+params.color+";\'></span>"+ series[params.seriesIndex].pieData.value;\n        }\n      },\n    },\n    xAxis3D: {\n      min: -1,\n      max: 1,\n    },\n    yAxis3D: {\n      min: -1,\n      max: 1,\n    },\n    zAxis3D: {\n      min: -1,\n      max: 1,\n    },\n\n    grid3D: {\n      show: false,\n      boxHeight: 15,\n      height: "100%",\n      width: "100%",\n      //  postEffect:{\n      //   enable:true\n      //  },\n      viewControl: {\n        //3d效果可以放大、旋转等，请自己去查看官方配置\n        alpha: 25,\n        // 饼块开始得角度\n        beta: 190,\n        rotateSensitivity: 1,\n        zoomSensitivity: 0,\n        panSensitivity: 0,\n        autoRotate: false,\n        distance: 260,\n        autoRotateSpeed: 10,\n        autoRotateAfterStill: 10,\n      },\n    },\n    series: series,\n  };\n  //构建3d饼状图\n  let myChart = echarts.init(document.getElementById("container2"));\n  // 传入数据生成 option\n  myChart.setOption(option);\n\n};\nconst count = ref(0);\nconst state = reactive({});\n<\/script>\n\n\n<style scoped >\n.content {\n  position: relative;\n  background-color: #022b66;\n  box-shadow: 0px 3px 50px 1px rgba(0, 101, 175, 0.4);\n  border: 1px solid rgba(19, 127, 212, 0.6);\n}\n#container2 {\n  width: 100%;\n  height: 100%;\n  position: absolute;\n  left: 0px;\n  top: 0px;\n  z-index: 2;\n}\n.dizuo {\n  z-index: 1;\n  position: absolute;\n  bottom: 106px;\n  left: 50%;\n  width: 443px;\n  height: 151px;\n  transform: translateX(-48%);\n}\n</style>\n\n  \n  ',Pie3D3:'\n  <template>\n  <div\n    class="content"\n    :style="{\n      height: height,\n      width: width,\n    }"\n  >\n    <img src="/vue.example/dizuo.png" class="dizuo3" alt="" />\n    <div id="container3"></div>\n  </div>\n</template>\n\n<script setup>\nimport { ref, reactive, onMounted } from "vue";\nimport { getSeriesPie3D, getParametricEquation } from "./tool";\nimport  "echarts";\nimport "echarts-gl";\nconst props = defineProps({\n  width: {\n    //列数据\n    type: String,\n    default: "930px",\n  },\n  height: {\n    type: String,\n    default: "492px",\n  },\n});\nonMounted(() => {\n  getEcharts();\n});\nconst getEcharts = () => {\n  let selectedIndex = "";\n  let hoveredIndex = "";\n  // 传入数据生成 option\n  let data = [\n    {\n      name: "电气维保",\n      value: 25,\n      itemStyle: {\n        color: "#00ADEF",\n      },\n    },\n    {\n      name: "机液维保",\n      value: 20,\n      itemStyle: {\n        color: "#6E67E3",\n      },\n    },{\n      name: "项目经理",\n      value: 25,\n      itemStyle: {\n        color: "#E2698D",\n      },\n    },\n    {\n      name: "操作手",\n      value: 20,\n      itemStyle: {\n        color: "#30B878",\n      },\n    },\n  ];\n  let series = getSeriesPie3D({\n    pieData: data,\n    internalDiameterRatio:0,\n    bottomk: 0,\n    pieHeight: 46,\n  });\n  let option = {\n    fontFamily: "Source Han Sans CN",\n    legend: {\n      show: true,\n      bottom: 10,\n      itemHeight: 14,\n      itemWidth: 24,\n      itemGap: 30,\n      textStyle: {\n        color: "#D3E4FE",\n        fontSize: 12,\n        fontWeight: "400",\n      },\n      data: data,\n    },\n    tooltip: {\n      formatter: (params) => {\n        if (params.seriesName !== "mouseoutSeries") {\n          return params.seriesName+"<br/><span style=\'display:inline-block;margin-right:5px;border-radius:10px;width:10px;height:10px;background-color:"+params.color+";\'></span>"+ series[params.seriesIndex].pieData.value;\n        }\n      },\n    },\n    xAxis3D: {\n      min: -1,\n      max: 1,\n    },\n    yAxis3D: {\n      min: -1,\n      max: 1,\n    },\n    zAxis3D: {\n      min: -1,\n      max: 1,\n    },\n\n    grid3D: {\n      show: false,\n      boxHeight: 15,\n      height: "100%",\n      width: "100%",\n      //  postEffect:{\n      //   enable:true\n      //  },\n      viewControl: {\n        //3d效果可以放大、旋转等，请自己去查看官方配置\n        alpha: 25,\n        // 饼块开始得角度\n        beta: 190,\n        rotateSensitivity: 1,\n        zoomSensitivity: 0,\n        panSensitivity: 0,\n        autoRotate: false,\n        distance: 400,\n        autoRotateSpeed: 10,\n        autoRotateAfterStill: 10,\n      },\n    },\n    series: series,\n  };\n  //构建3d饼状图\n  let myChart = echarts.init(document.getElementById("container3"));\n  // 传入数据生成 option\n  myChart.setOption(option);\n\n};\nconst count = ref(0);\nconst state = reactive({});\n<\/script>\n\n<style scoped >\n.content {\n  position: relative;\n  background-color: #022b66;\n  box-shadow: 0px 3px 50px 1px rgba(0, 101, 175, 0.4);\n  border: 1px solid rgba(19, 127, 212, 0.6);\n}\n#container3 {\n  width: 100%;\n  height: 100%;\n  position: absolute;\n  left: 0px;\n  top: 0px;\n  z-index: 2;\n}\n.dizuo3 {\n  z-index: 1;\n  position: absolute;\n  bottom: 106px;\n  left: 50%;\n  width: 443px;\n  height: 151px;\n  transform: translateX(-48%);\n}\n</style>\n\n  \n  ',Pie3D4:'\n  <template>\n  <div\n    class="content"\n    :style="{\n      height: height,\n      width: width,\n    }"\n  >\n    <img src="/vue.example/dizuo.png" class="dizuo3" alt="" />\n    <div id="container3"></div>\n  </div>\n</template>\n\n<script setup>\nimport { ref, reactive, onMounted } from "vue";\nimport { getSeriesPie3D, getParametricEquation } from "./tool";\nimport  "echarts";\nimport "echarts-gl";\nconst props = defineProps({\n  width: {\n    //列数据\n    type: String,\n    default: "930px",\n  },\n  height: {\n    type: String,\n    default: "492px",\n  },\n});\nonMounted(() => {\n  getEcharts();\n});\nconst getEcharts = () => {\n  let selectedIndex = "";\n  let hoveredIndex = "";\n  // 传入数据生成 option\n  let data = [\n    {\n      name: "电气维保",\n      value: 25,\n      itemStyle: {\n        color: "#00ADEF",\n      },\n    },\n    {\n      name: "机液维保",\n      value: 20,\n      itemStyle: {\n        color: "#6E67E3",\n      },\n    },{\n      name: "项目经理",\n      value: 25,\n      itemStyle: {\n        color: "#E2698D",\n      },\n    },\n    {\n      name: "操作手",\n      value: 20,\n      itemStyle: {\n        color: "#30B878",\n      },\n    },\n  ];\n  let series = getSeriesPie3D({\n    pieData: data,\n    internalDiameterRatio:0,\n    bottomk: 0,\n    pieHeight: 46,\n  });\n  let option = {\n    fontFamily: "Source Han Sans CN",\n    legend: {\n      show: true,\n      bottom: 10,\n      itemHeight: 14,\n      itemWidth: 24,\n      itemGap: 30,\n      textStyle: {\n        color: "#D3E4FE",\n        fontSize: 12,\n        fontWeight: "400",\n      },\n      data: data,\n    },\n    tooltip: {\n      formatter: (params) => {\n        if (params.seriesName !== "mouseoutSeries") {\n          return params.seriesName+"<br/><span style=\'display:inline-block;margin-right:5px;border-radius:10px;width:10px;height:10px;background-color:"+params.color+";\'></span>"+ series[params.seriesIndex].pieData.value;\n        }\n      },\n    },\n    xAxis3D: {\n      min: -1,\n      max: 1,\n    },\n    yAxis3D: {\n      min: -1,\n      max: 1,\n    },\n    zAxis3D: {\n      min: -1,\n      max: 1,\n    },\n\n    grid3D: {\n      show: false,\n      boxHeight: 15,\n      height: "100%",\n      width: "100%",\n      //  postEffect:{\n      //   enable:true\n      //  },\n      viewControl: {\n        //3d效果可以放大、旋转等，请自己去查看官方配置\n        alpha: 25,\n        // 饼块开始得角度\n        beta: 190,\n        rotateSensitivity: 1,\n        zoomSensitivity: 0,\n        panSensitivity: 0,\n        autoRotate: false,\n        distance: 400,\n        autoRotateSpeed: 10,\n        autoRotateAfterStill: 10,\n      },\n    },\n    series: series,\n  };\n  //构建3d饼状图\n  let myChart = echarts.init(document.getElementById("container3"));\n  // 传入数据生成 option\n  myChart.setOption(option);\n\n};\nconst count = ref(0);\nconst state = reactive({});\n<\/script>\n\n<style scoped >\n.content {\n  position: relative;\n  background-color: #022b66;\n  box-shadow: 0px 3px 50px 1px rgba(0, 101, 175, 0.4);\n  border: 1px solid rgba(19, 127, 212, 0.6);\n}\n#container3 {\n  width: 100%;\n  height: 100%;\n  position: absolute;\n  left: 0px;\n  top: 0px;\n  z-index: 2;\n}\n.dizuo3 {\n  z-index: 1;\n  position: absolute;\n  bottom: 106px;\n  left: 50%;\n  width: 443px;\n  height: 151px;\n  transform: translateX(-48%);\n}\n</style>\n\n  \n  ',Pie4:'\n \n \n  <template>\n  <div\n    class="content"\n    :style="{\n      height: height,\n      width: width,\n    }"\n  >\n    <div id="huikuan-echarts"></div>\n  </div>\n</template>\n\n<script setup>\nimport { ref, reactive, onMounted } from "vue";\nimport "echarts";\nconst props = defineProps({\n  width: {\n    //列数据\n    type: String,\n    default: "930px",\n  },\n  height: {\n    type: String,\n    default: "492px",\n  },\n});\nonMounted(() => {\n  getEcharts();\n});\n\nconst getEcharts = () => {\n //展示数据\nconst optionData = [];\n //展示数据\nconst optionData2 = [];\n//扇形图颜色数据\nconst colorList = [\n"#25CEF0","#E8574C","#D0D96F","#fff"\n];\n//请求的数据\nconst resultData = [\n   {\n      name: \'罗汉松\',\n      value: 95,\n      percent: \'8.05\'\n   },\n   {\n      name: \'四季桂\',\n      value: 120,\n      percent: \'10.17\'\n   },\n   {\n      name: \'马齿笕\',\n      value: 98,\n      percent: \'8.31\'\n   },\n];\nlet sum = 0;\nresultData.forEach(item => {\n   sum += item.value;\n})\nresultData.forEach((item,i) => {\n   optionData.push({ value: item.value, name: item.name,label:{\n              formatter: function(params) {\n            console.log(params)\n            return `{a|${params.name}}\n{b|${params.value}个(${params.percent}%)}`;\n          },\n   } });\n\n        optionData2.push(\n  { value: item.value, name: item.name,color:\'#fff\' }\n    )\n    optionData2.push(\n       {\n       value:10,\n       name:"12",\n     \n       label:{\n          position:"inside",\n          backgroundColor:"#fff",\n          width:15,\n          height:15,\n          borderWidth:4,\n          borderTYpe:"solid",\n         // borderColor:color[i],\n          borderRadius:300\n       }\n    }\n    )\n})\n\n  let myChart = echarts.init(document.getElementById("huikuan-echarts"));\n  let option = {\n\n\n   grid:{\n  \n   },\n   color:colorList,\n   series: [\n      {\n         type: \'pie\',\n         radius: [\'50%\', \'60%\'],\n         center: [\'50%\', \'50%\'],\n         itemStyle:{\n            borderRadius:20,\n         },\n               label: {\n          textStyle: {\n            fontSize: 16,\n            color: "#fff",\n          },\n  \n          rich: {\n            a: {\n              color: "rgba(211, 228, 254, 1)",\n              fontSize: 16,\n              align: "center",\n              lineHeight: 25,\n              fontWeight: 600,\n            }, \n            b: {\n              color: "inherit",\n              fontSize: 16,\n              align: "center",\n              lineHeight: 25,\n              fontWeight: 600,\n            },\n          },\n        },\n         labelLine: {\n            show: true,\n         },\n         data: optionData,\n         z:1\n      },\n  {\n         type: \'pie\',\n         radius: [\'50%\', \'60%\'],\n         center: [\'50%\', \'50%\'],\n         itemStyle:{\n            borderRadius:20,\n         },\n               label: {\n          textStyle: {\n            fontSize: 16,\n            color: "#fff",\n          },\n  \n          rich: {\n            a: {\n              color: "rgba(211, 228, 254, 1)",\n              fontSize: 16,\n              align: "center",\n              lineHeight: 25,\n              fontWeight: 600,\n            }, \n            b: {\n              color: "inherit",\n              fontSize: 16,\n              align: "center",\n              lineHeight: 25,\n              fontWeight: 600,\n            },\n          },\n        },\n         labelLine: {\n            show: true,\n         },\n         data: optionData2,\n         z:3\n      },\n   ]\n}\n  myChart.setOption(option);\n};\nconst count = ref(0);\n<\/script>\n\n<style scoped>\n.content {\n  position: relative;\n  background-color: #022b66;\n  box-shadow: 0px 3px 50px 1px rgba(0, 101, 175, 0.4);\n  border: 1px solid rgba(19, 127, 212, 0.6);\n}\n#huikuan-echarts {\n  width: 100%;\n  height: 100%;\n}\n</style>\n\n  \n  \n\n  \n  ',Progress1:"\n<template>\n    <div\n      class=\"content\"\n   \n    >\n     <div :ref=\"echartsMap\" id=\"mainChina\"></div>\n    </div>\n  </template>\n  \n  <script setup>\n  import { ref, reactive, nextTick, onMounted, watch } from \"vue\";\n  import \"echarts\";\n  let value = 20.66;\nlet title = '%';\n  const state = reactive({\n    option:  {\n    title: {\n        text: '{b|销售额度}\\n{a|' + value + '%}',\n        x: 'center',\n        y: 'center',\n        textStyle: {\n            rich: {\n              \n                b: {\n                    fontSize: 38,\n                    color: 'rgba(211, 228, 254, 1)',\n                    // padding: [0,0,14,0]\n                },\n                a: {\n                    fontSize: 38,\n                    color: 'rgba(104, 228, 255, 1)',\n                     padding: [20,0,0 ,0]\n                },\n            },\n        },\n    },\n    series: [\n        {\n            type: 'gauge',\n            radius: '60%',\n            clockwise: true,\n            startAngle: '90',\n            endAngle: '-270',\n            splitNumber: 10,\n            detail: {\n                offsetCenter: [0, -20],\n                formatter: ' ',\n            },\n            pointer: {\n                show: false,\n            },\n            axisLine: {\n                show: true,\n                lineStyle: {\n                    color: [\n                        [value / 100, 'rgba(0, 149, 255, 1)'],\n                        [1, 'rgb(3,89,130)'],\n                    ],\n                    width: 30,\n                   \n                },\n            },\n            axisTick: {\n                show: false,\n            },\n            splitLine: {\n                show: false,\n                length: 32,\n                lineStyle: {\n                    color: 'white',\n                    width: 6,\n                },\n            },\n            axisLabel: {\n                show: false,\n            },\n        },\n     \n    ],\n}\n    \n  });\n  let echartsMapel = ref(\"\");\n  let opt = null;\n  const echartsMap = (e) => (echartsMapel.value = e);\n  const init = () => {\n    let myChart = echarts.init(echartsMapel.value);\n    myChart.setOption(state.option);\n    const setOption = (dataObj) => {\n      let opt = myChart.getOption();\n      Object.assign(opt, dataObj);\n      myChart.setOption(opt);\n    };\n    return setOption;\n  };\n  \n  onMounted(() => {\n    init();\n  });\n  <\/script>\n  \n  <style scoped >\n  .content {\n    position: relative;\n    width: 100%;\n    box-shadow: 0px 3px 50px 1px rgba(0, 101, 175, 0.4);\n  }\n  #mainChina {\n    width: 100%;\n    height: 600px;\n    background-color: #00184F;\n  }\n  </style>\n  \n  \n    \n    \n  \n  \n    \n    ",WaterPolo:"\n\n\n    <template>\n    <div\n      class=\"content\"\n   \n    >\n     <div :ref=\"echartsMap\" id=\"mainChina\"></div>\n    </div>\n  </template>\n  \n  <script setup>\n  import { ref, reactive, nextTick, onMounted, watch } from \"vue\";\n  import \"echarts\";\n  import \"echarts-liquidfill\";\nconst value = 0.5;\n  const state = reactive({\n    option:  {\n   backgroundColor: '#0F224C', //背景色\n   series: [\n      {\n         name: '预估量',\n         type: 'liquidFill',\n         radius: '60%',\n         center: ['50%', '50%'],\n         backgroundStyle: {\n            color: 'transparent',\n         },\n         data: [value, value],\n         amplitude: 20, //水波振幅\n         label: {\n            //标签设置\n            position: ['50%', '45%'],\n            formatter: '50%', //显示文本,\n            textStyle: {\n               fontSize: '52px', //文本字号,\n               color: '#fff',\n            },\n         },\n         outline: {\n            borderDistance: 3,\n            itemStyle: {\n               borderWidth: 2,\n               borderColor: {\n                  type: 'linear',\n                  x: 1,\n                  y: 0,\n                  x2: 0,\n                  y2: 0,\n                  colorStops: [\n                     {\n                        offset: 0,\n                        color: '#007DFF',\n                     },\n                     {\n                        offset: 0.6,\n                        color: 'rgba(45, 67, 114, 1)',\n                     },\n                     {\n                        offset: 1,\n                        color: 'rgba(45, 67, 114, 1)',\n                     },\n                  ],\n                  globalCoord: false,\n               },\n            },\n         },\n         itemStyle: {\n            color: new echarts.graphic.LinearGradient(0, 1, 0, 0, [\n               {\n                  offset: 1,\n                  color: 'rgba(31, 222, 225, 1)',\n               },\n               {\n                  offset: 0.85,\n                  color: '#007DFF80',\n               },\n               {\n                  offset: 0.35,\n                  color: '#004a99',\n               },\n               {\n                  offset: 0,\n                  color: 'rgba(31, 222, 225, 1)',\n               },\n            ]),\n         },\n      },\n   ],\n}\n  });\n  let echartsMapel = ref(\"\");\n  let opt = null;\n  const echartsMap = (e) => (echartsMapel.value = e);\n  const init = () => {\n    let myChart = echarts.init(echartsMapel.value);\n    myChart.setOption(state.option);\n    const setOption = (dataObj) => {\n      let opt = myChart.getOption();\n      Object.assign(opt, dataObj);\n      myChart.setOption(opt);\n    };\n    return setOption;\n  };\n  \n  onMounted(() => {\n    init();\n  });\n  <\/script>\n  \n  <style scoped >\n  .content {\n    position: relative;\n    width: 100%;\n    box-shadow: 0px 3px 50px 1px rgba(0, 101, 175, 0.4);\n  }\n  #mainChina {\n    width: 100%;\n    height: 600px;\n    background-color: #00184F;\n  }\n  </style>\n  \n  \n    \n    \n  \n    \n    ",bar1:'\n    <template>\n    <div\n      class="content"\n   \n    >\n     <div :ref="echartsMap" id="mainChina"></div>\n    </div>\n  </template>\n  \n  <script setup>\n  import { ref, reactive, nextTick, onMounted, watch } from "vue";\n  import "echarts";\n  \n  const state = reactive({\n    option: {\n      tooltip: {\n        trigger: "axis",\n        axisPointer: {\n          type: "shadow",\n        },\n      },\n      legend: {\n        show: false,\n      },\n      grid: {\n        left: "3%",\n        right: "10%",\n        bottom: "3%",\n        containLabel: true,\n      },\n      xAxis: {\n        type: "value",\n        name: "(个)",\n        nameLocation: "end",\n        nameGap: 35,\n        boundaryGap: [0, 0.01],\n        position: "top",\n        nameTextStyle: {\n          fontSize: 12,\n          color: "#999999",\n        },\n        axisLabel: {\n          color: "#D3E4FE",\n        },\n        splitLine: {\n          lineStyle: {\n            color: "#073370",\n            width: 1,\n            type: "dashed",\n          },\n        },\n      },\n      yAxis: {\n        type: "category",\n        axisTick: { show: false },\n  \n        data: ["Brazil", "Indonesia", "USA", "India", "China", "World"],\n        axisLabel: {\n          color: "#D3E4FE",\n        },\n        axisLine: {\n          lineStyle: {\n            color: "#073370",\n            width: 1,\n          },\n        },\n      },\n      series: [\n        {\n          name: "2011",\n          barWidth: 8,\n          type: "bar",\n          data: [1000, 2348, 2904, 1049, 1744, 6230],\n          label: {\n            show: true,\n            precision: 1,\n            position: "right",\n            valueAnimation: true,\n            color: "#D3E4FE",\n            fontFamily: "monospace",\n          },\n          itemStyle: {\n            barBorderRadius: [10, 10, 10, 10],\n            color: {\n              type: "linear",\n              x: 0,\n              y: 0,\n              x2: 1,\n              y2: 0,\n              colorStops: [\n                { offset: 0, color: "rgba(63,117,255,0)" },\n                { offset: 1, color:"#0063FA" },\n              ],\n              global: false, // 缺省为 false\n            },\n          },\n        },\n        {\n          name: "外圆",\n          type: "scatter",\n          emphasis: {\n            scale: false,\n          },\n          symbol: "circle",\n          symbolSize: [10, 10], // 进度条白点\n          itemStyle: {\n            show: true,\n            barBorderRadius: [10, 10, 10, 10],\n            color: "#77BEFF",\n            shadowColor: "#3F75FF",\n            shadowBlur: 11,\n            // shadowOffsetY: 5,\n            // shadowOffsetX: 5,\n            borderWidth: 1,\n            opacity: 1,\n          },\n          z: 2,\n          data: [1000, 2348, 2904, 1049, 1744, 6230],\n          animationDelay: 500,\n        },\n      ],\n    },\n  });\n  let echartsMapel = ref("");\n  let opt = null;\n  const echartsMap = (e) => (echartsMapel.value = e);\n  const init = () => {\n    let myChart = echarts.init(echartsMapel.value);\n    myChart.setOption(state.option);\n    const setOption = (dataObj) => {\n      let opt = myChart.getOption();\n      Object.assign(opt, dataObj);\n      myChart.setOption(opt);\n    };\n    return setOption;\n  };\n  \n  onMounted(() => {\n    init();\n  });\n  <\/script>\n  \n  <style scoped >\n  .content {\n    position: relative;\n    width: 100%;\n    box-shadow: 0px 3px 50px 1px rgba(0, 101, 175, 0.4);\n  }\n  #mainChina {\n    width: 100%;\n    height: 600px;\n    background-color: #00184F;\n  }\n  </style>\n  \n  \n    ',barY:'\n    <template>\n    <div\n      class="content"\n   \n    >\n     <div :ref="echartsMap" id="mainChina"></div>\n    </div>\n  </template>\n  \n  <script setup>\n  import { ref, reactive, nextTick, onMounted, watch } from "vue";\n  import "echarts";\n  \n  const state = reactive({\n    option: {\n      tooltip: {\n        trigger: "axis",\n        axisPointer: {\n          type: "shadow",\n        },\n      },\n      legend: {\n        show: false,\n      },\n      grid: {\n        left: "3%",\n        right: "10%",\n        bottom: "3%",\n        containLabel: true,\n      },\n      xAxis: {\n        type: "category",\n     \n        axisTick: { show: false },\n        axisLabel: {\n          color: "#D3E4FE",\n        },\n  \n        data: ["Brazil", "Indonesia", "USA", "India", "China", "World"],\n      },\n      yAxis: {\n        type: "value",\n        \n        name: "(个)",\n        nameLocation: "end",\n        nameGap: 35,\n        boundaryGap: [0, 0.01],\n        nameTextStyle: {\n          fontSize: 12,\n          color: "#999999",\n        },\n        splitLine: {\n          lineStyle: {\n            color: "#073370",\n            width: 1,\n            type: "dashed",\n          },\n        },\n        axisLabel: {\n          color: "#D3E4FE",\n        },\n        axisLine: {\n          lineStyle: {\n            color: "#073370",\n            width: 1,\n          },\n        },\n      },\n      series: [\n        {\n          name: "2011",\n          barWidth: 18,\n          type: "bar",\n          data: [1000, 2348, 2904, 1049, 1744, 6230],\n          label: {\n            show: true,\n            precision: 1,\n            position: "top",\n            valueAnimation: true,\n            color: "#D3E4FE",\n            fontFamily: "monospace",\n          },\n          itemStyle: {\n            color: {\n              type: "linear",\n              x: 0,\n              y: 1,\n              x2: 1,\n              y2: 0,\n              colorStops: [\n                { offset: 0, color: "rgba(63,117,255,0)" },\n                { offset: 1, color:"#00AAFA" },\n              ],\n              global: false, // 缺省为 false\n            },\n          },\n        },\n      ],\n    },\n  });\n  let echartsMapel = ref("");\n  let opt = null;\n  const echartsMap = (e) => (echartsMapel.value = e);\n  const init = () => {\n    let myChart = echarts.init(echartsMapel.value);\n    myChart.setOption(state.option);\n    const setOption = (dataObj) => {\n      let opt = myChart.getOption();\n      Object.assign(opt, dataObj);\n      myChart.setOption(opt);\n    };\n    return setOption;\n  };\n  \n  onMounted(() => {\n    init();\n  });\n  <\/script>\n  \n  <style scoped >\n  .content {\n    position: relative;\n    width: 100%;\n    box-shadow: 0px 3px 50px 1px rgba(0, 101, 175, 0.4);\n  }\n  #mainChina {\n    width: 100%;\n    height: 600px;\n    background-color: #00184F;\n  }\n  </style>\n  \n  \n    ',dimensionalBar:"\n    <template>\n    <div\n      class=\"content\"\n      :style=\"{\n        height: height,\n        width: width,\n      }\"\n    >\n        <div :ref=\"echartsMap\" id=\"mainChina\"></div>\n    </div>\n  </template>\n  \n  <script setup>\n  import { ref, reactive, nextTick, onMounted, watch } from \"vue\";\n  import  \"echarts\";\n  const offsetX = 20;\n  const offsetY = 10;\n  // 绘制左侧面\n  const CubeLeft = echarts.graphic.extendShape({\n     shape: {\n        x: 0,\n        y: 0,\n     },\n     buildPath: function (ctx, shape) {\n        // 会canvas的应该都能看得懂，shape是从custom传入的\n        const xAxisPoint = shape.xAxisPoint;\n        // console.log(shape);\n        const c0 = [shape.x, shape.y-5];\n        const c1 = [shape.x - offsetX, shape.y - offsetY];\n        const c2 = [xAxisPoint[0] - offsetX, xAxisPoint[1] - offsetY];\n        const c3 = [xAxisPoint[0], xAxisPoint[1]-5];\n        ctx.moveTo(c0[0], c0[1]).lineTo(c1[0], c1[1]).lineTo(c2[0], c2[1]).lineTo(c3[0], c3[1]).closePath();\n     },\n  });\n  // 绘制右侧面\n  const CubeRight = echarts.graphic.extendShape({\n     shape: {\n        x: 0,\n        y: 0,\n     },\n     buildPath: function (ctx, shape) {\n        const xAxisPoint = shape.xAxisPoint;\n        const c1 = [shape.x, shape.y-5];\n        const c2 = [xAxisPoint[0], xAxisPoint[1]-5];\n        const c3 = [xAxisPoint[0] + offsetX, xAxisPoint[1] - offsetY];\n        const c4 = [shape.x + offsetX, shape.y - offsetY];\n        ctx.moveTo(c1[0], c1[1]).lineTo(c2[0], c2[1]).lineTo(c3[0], c3[1]).lineTo(c4[0], c4[1]).closePath();\n     },\n  });\n  // 绘制顶面\n  const CubeTop = echarts.graphic.extendShape({\n     shape: {\n        x: 0,\n        y: 0,\n     },\n     buildPath: function (ctx, shape) {\n          const y = -1\n        const c1 = [shape.x, shape.y+y-5];\n        const c2 = [shape.x + offsetX, shape.y - offsetY+y] ; //右点\n        const c3 = [shape.x, shape.y - offsetX+y+5];\n        const c4 = [shape.x - offsetX, shape.y - offsetY+y];\n        ctx.moveTo(c1[0], c1[1]).lineTo(c2[0], c2[1]).lineTo(c3[0], c3[1]).lineTo(c4[0], c4[1]).closePath();\n     },\n  });\n  // 注册三个面图形\n  echarts.graphic.registerShape('CubeLeft', CubeLeft);\n  echarts.graphic.registerShape('CubeRight', CubeRight);\n  echarts.graphic.registerShape('CubeTop', CubeTop);\n  \n  const data  =[1000, 2348, 2904, 1049, 1744, 6230]\n  /*\n  基本数据类型\n  引用数据类型（复杂类型） 个人建议 ref初始化变量 \n  ref 和 reactive 本质我们可以简单的理解为ref是对reactive的二次包装, \n  ref定义的数据访问的时候要多一个.value\n  */\n  const color = [\"rgba(63,117,255,0)\", \"#0063FA\"];\n  const state = reactive({\n    option:  {\n    \n      \n  \n      grid: {\n        left: '3%',\n        right: '4%',\n        bottom: '3%',\n        containLabel: true\n      },\n  \n      xAxis: {\n        type: 'category',\n        axisTick: { show: false },\n        data: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n        axisLabel: {\n          color: \"#97B2E0\",\n        },\n      },\n      yAxis: [\n          {\n        type: 'value',\n        name:\"(万元)\", \n              axisLine: {\n              show: true,\n              lineStyle: {\n                 color: '#00A8FF'\n              }\n           },\n        nameTextStyle: {\n            color:\"#97B2E0\",\n            padding:[0,0,-550,-50]\n        },\n        axisLabel: {\n          color: \"#97B2E0\",\n        },\n        splitLine: {\n          show: false,\n         \n          },\n          axisTick:{\n              show:false\n          }\n      }\n      ],\n      series: [\n      \n        {\n          type: 'custom',\n          renderItem: (params, api) => {\n             const location = api.coord([api.value(0), api.value(1)]);\n             return {\n                type: 'group',\n                children: [\n                   {\n                      type: 'CubeLeft',\n                      shape: {\n                         api,\n                         xValue: api.value(0),\n                         yValue: api.value(1),\n                         x: location[0],\n                         y: location[1],\n                         xAxisPoint: api.coord([api.value(0), 0]),\n                      },\n                      style: {\n                         fill: new echarts.graphic.LinearGradient(0, 0, 0, 1, [\n                            {\n                               offset: 0,\n                               color: '#39CEFF'\n                            },\n                            {\n                               offset: 1,\n                               color: 'rgba(51, 152, 188, 0)',\n                            },\n                         ]),\n                      },\n                   },\n                   {\n                      type: 'CubeRight',\n  \n                      shape: {\n                         api,\n                         xValue: api.value(0),\n                         yValue: api.value(1),\n                         x: location[0],\n                         y: location[1],\n                         xAxisPoint: api.coord([api.value(0), 0]),\n                      },\n                      style: {\n                         fill: new echarts.graphic.LinearGradient(0, 0, 0, 1, [\n                             {\n                               offset: 0,\n                               color: '#39CEFF'\n                            },\n                            {\n                               offset: 1,\n                               color: 'rgba(51, 152, 188, 0)',\n                            },\n                         ]),\n                      },\n                   },\n                   {\n                      type: 'CubeTop',\n                      shape: {\n                         api,\n                         xValue: api.value(0),\n                         yValue: api.value(1),\n                         x: location[0],\n                         y: location[1],\n                         xAxisPoint: api.coord([api.value(0), 0]),\n                      },\n                      style: {\n                         fill: new echarts.graphic.LinearGradient(0, 0, 0, 1, [\n                            {\n                               offset: 0,\n                               color: '#00DEFF',\n                            },\n                            {\n                               offset: 1,\n                               color: '#00DEFF',\n                            },\n                         ]),\n                      },\n                   },\n                ],\n             };\n          },\n          data:data,\n          \n       },\n           {\n           type: 'bar',\n           itemStyle: {\n              color: 'transparent',\n           },\n           tooltip: {},\n           data: data,\n              label: {\n            show: true,\n            precision: 1,\n            position: \"top\",\n            valueAnimation: true,\n            color: \"#D3E4FE\",\n            fontFamily: \"monospace\",\n            offset: [0, -10],\n          },\n        },\n      ]\n    },\n  });\n  let echartsMapel = ref(\"\");\n  let opt = null;\n  const echartsMap = (e) => (echartsMapel.value = e);\n  const init = () => {\n    let myChart = echarts.init(echartsMapel.value);\n    myChart.setOption(state.option);\n    const setOption = (dataObj) => {\n      let opt = myChart.getOption();\n      Object.assign(opt, dataObj);\n      myChart.setOption(opt);\n    };\n    return setOption;\n  };\n  const handleRun = (val) => {\n    opt(val);\n  };\n  onMounted(() => {\n    setTimeout(() => {\n      opt = init();\n    }, 500);\n    window.addEventListener(\"resize\", () => {\n      opt();\n    });\n  });\n  <\/script>\n  \n  <style scoped >\n  .content {\n    position: relative;\n    width: 100%;\n    height: 100%;\n    box-shadow: 0px 3px 50px 1px rgba(0, 101, 175, 0.4);\n  }\n  #mainChina {\n    width: 100%;\n    height: 600px;\n    background-color: #00184F;\n  }\n  </style>\n  \n    ",dimensionalBar2:"\n  \n  \n    <template>\n    <div\n      class=\"content\"\n      :style=\"{\n        height: height,\n        width: width,\n      }\"\n    >\n        <div :ref=\"echartsMap\" id=\"mainChina\"></div>\n    </div>\n  </template>\n  \n  <script setup>\n  import { ref, reactive, nextTick, onMounted, watch } from \"vue\";\n  import  \"echarts\";\nconst offsetX = 12;\nconst offsetY = 6;\nconst barWidth = 30\n// 绘制左侧面\nconst CubeLeft = echarts.graphic.extendShape({\n   shape: {\n      x: 0,\n      y: 0,\n   },\n   buildPath: function (ctx, shape) {\n      // 会canvas的应该都能看得懂，shape是从custom传入的\n      const xAxisPoint = shape.xAxisPoint;\n      // console.log(shape);\n      const c0 = [shape.x, shape.y];\n      const c1 = [shape.x - offsetX, shape.y - offsetY];\n      const c2 = [xAxisPoint[0] - offsetX, xAxisPoint[1] - offsetY];\n      const c3 = [xAxisPoint[0], xAxisPoint[1]];\n      ctx.moveTo(c0[0], c0[1]).lineTo(c1[0], c1[1]).lineTo(c2[0], c2[1]).lineTo(c3[0], c3[1]).closePath();\n   },\n});\n// 绘制右侧面\nconst CubeRight = echarts.graphic.extendShape({\n   shape: {\n      x: 0,\n      y: 0,\n   },\n   buildPath: function (ctx, shape) {\n      const xAxisPoint = shape.xAxisPoint;\n      const c1 = [shape.x, shape.y];\n      const c2 = [xAxisPoint[0], xAxisPoint[1]];\n      const c3 = [xAxisPoint[0] + offsetX, xAxisPoint[1] - offsetY];\n      const c4 = [shape.x + offsetX, shape.y - offsetY];\n      ctx.moveTo(c1[0], c1[1]).lineTo(c2[0], c2[1]).lineTo(c3[0], c3[1]).lineTo(c4[0], c4[1]).closePath();\n   },\n});\n// 绘制顶面\nconst CubeTop = echarts.graphic.extendShape({\n   shape: {\n      x: 0,\n      y: 0,\n   },\n   buildPath: function (ctx, shape) {\n      const c1 = [shape.x, shape.y];\n      const c2 = [shape.x + offsetX, shape.y - offsetY]; //右点\n      const c3 = [shape.x, shape.y - offsetX];\n      const c4 = [shape.x - offsetX, shape.y - offsetY];\n      ctx.moveTo(c1[0], c1[1]).lineTo(c2[0], c2[1]).lineTo(c3[0], c3[1]).lineTo(c4[0], c4[1]).closePath();\n   },\n});\n// 注册三个面图形\necharts.graphic.registerShape('CubeLeft', CubeLeft);\necharts.graphic.registerShape('CubeRight', CubeRight);\necharts.graphic.registerShape('CubeTop', CubeTop);\nconst colorArr2 = [\n   ['rgba(0, 159, 250, 1)', '#22F9E3', 'rgba(35, 235, 255, 1)'],\n    ['rgba(252, 145, 56, 1)', 'rgba(252, 178, 115, 1)', 'rgba(255, 156, 84, 1)'],\n]\n  const colorArr = [\n    {\n      CubeLeft:['rgba(36, 240, 255, 1)','rgba(0, 125, 250,1)'],\n      CubeRight:['rgba(36, 240, 255, 1)','rgba(0, 125, 250,1)'],\n       CubeTop:['rgba(35, 235, 255, 1)'],\n    },\n     {\n           CubeLeft:['rgba(252, 145, 56,1)','rgba(252, 178, 115,1)'],\n      CubeRight:['rgba(240, 121, 44,1)','rgba(221, 86, 27,1)'],\n       CubeTop:['rgba(255, 156, 84,1)'],\n     }\n  ]\nlet series = []\nlet xData = ['上行PRB利用率(%)', '下行PRB利用率(%)', '上行吞吐率(%)', '下行吞吐率(%)', '上行DB引用率', '下行DB引用率']\nlet legendArr = ['扩容前', '扩容后']\nlet datas = [\n   ['20', '30', '40', '50', '30', '40',],\n   ['70', '80', '80', '70', '80', '70'],\n]\ndatas.forEach((item, index) => {\n   series.push({\n      type: 'custom',\n      name: legendArr[index],\n      renderItem: (params, api) => {\n         const location = api.coord([api.value(0), api.value(1)]);\n         return {\n            type: 'group',\n            x: (index - datas.length / 2) * barWidth + 15,\n            children: [\n               {\n                  type: 'CubeLeft',\n                  shape: {\n                     api,\n                     xValue: api.value(0),\n                     yValue: api.value(1),\n                     x: location[0],\n                     y: location[1],\n                     xAxisPoint: api.coord([api.value(0), 0]),\n                  },\n                  style: {\n                     fill: new echarts.graphic.LinearGradient(0, 0, 1, 1, [\n                        {\n                           offset: 0,\n                           color: colorArr[index % colorArr.length].CubeLeft[0],\n                        },\n                        {\n                           offset: 1,\n                           color: colorArr[index % colorArr.length].CubeLeft[1],\n                        },\n                     ]),\n                  },\n               },\n               {\n                  type: 'CubeRight',\n                  shape: {\n                     api,\n                     xValue: api.value(0),\n                     yValue: api.value(1),\n                     x: location[0],\n                     y: location[1],\n                     xAxisPoint: api.coord([api.value(0), 0]),\n                  },\n                  style: {\n                     fill: new echarts.graphic.LinearGradient(0, 0, 1, 1, [\n                             {\n                           offset: 0,\n                           color: colorArr[index % colorArr.length].CubeRight[0],\n                        },\n                        {\n                           offset: 1,\n                           color: colorArr[index % colorArr.length].CubeRight[1],\n                        },\n                     ]),\n                  },\n               },\n               {\n                  type: 'CubeTop',\n                  shape: {\n                     api,\n                     xValue: api.value(0),\n                     yValue: api.value(1),\n                     x: location[0],\n                     y: location[1],\n                     xAxisPoint: api.coord([api.value(0), 0]),\n                  },\n                  style: {\n                     fill: new echarts.graphic.LinearGradient(0, 0, 0, 1, [\n                        {\n                           offset: 0,\n                           color: colorArr[index % colorArr.length].CubeTop[0],\n                        },\n                        {\n                           offset: 1,\n                           color: colorArr[index % colorArr.length].CubeTop[0],\n                        },\n                     ]),\n                  },\n               },\n            ],\n         };\n      },\n      data: item\n   }, {\n      type: 'bar',\n      name: legendArr[index],\n      barWidth: 25,//当前适配，更改需要同时更改 offsetX,offsetY,barWidth\n      label: {\n         normal: {\n            show: true,\n            position: 'top',\n            // formatter: (e) => {\n            //    return e.value + '次';\n            // },\n            fontSize: 16,\n            color: 'rgba(211, 228, 254, 1)',\n            offset: [0, -10],\n         },\n      },\n      itemStyle: {\n         color: 'transparent',\n      },\n      tooltip: {},\n      data: item,\n   })\n})\n  /*\n  基本数据类型\n  引用数据类型（复杂类型） 个人建议 ref初始化变量 \n  ref 和 reactive 本质我们可以简单的理解为ref是对reactive的二次包装, \n  ref定义的数据访问的时候要多一个.value\n  */\n  const color = [\"rgba(63,117,255,0)\", \"#0063FA\"];\n  const state = reactive({\n    option:  {\n   backgroundColor: '#012366',\n   tooltip: {\n      trigger: 'axis',\n      borderWidth: 0,\n      backgroundColor: 'rgba(8,36,68,.7)',\n      color: '#fff',\n      textStyle: {\n         color: '#fff'\n      },\n      formatter: function (params, ticket, callback) {\n         console.log(params)\n         let str = params[0].name + '</br>';\n         params.forEach((item, index) => {\n            if (item.seriesType == 'custom')  //避免上方数字的bar也展示tooltip数据\n               str += `\n          <div style='display:flex;justify-content:space-between;align-items:center'>\n            <div style='margin-right:20px;'>\n              <span style=\"display:inline-block;width:10px;height:10px;border-radius:5px;background-color:${colorArr[index % colorArr.length].CubeTop[0]}\"></span>\n              &nbsp;${item.seriesName}\n            </div>\n            <span>&nbsp;${item.value ? item.value : '-'}</span>\n          </div>`\n         })\n         return str;\n      },\n   },\n   grid: {\n      left: 40,\n      right: 40,\n      top: 200,\n      bottom: 35,\n      containLabel: true\n   },\n   legend: {\n      right: '20',\n      top: '40',\n      show: true,\n      selectedMode: false, // 取消图例点击事件 目前图例显示隐藏指标值位置会错误\n      textStyle: {\n         color: 'white',\n         fontSize: 16\n      },\n      data: legendArr.map((item, index) => {\n         return {\n            name: item,\n            textStyle: {\n               color: 'white',\n               fontSize: 16\n            },\n            itemStyle: {\n               color: colorArr[index % colorArr.length].CubeTop[0],\n            }\n         };\n      }),\n   },\n\n   xAxis: {\n      type: 'category',\n      data: xData,\n      axisLine: {\n         show: true,\n         lineStyle: {\n            color: '#045d79'\n            // width: 2\n         }\n      },\n      axisTick: {\n         show: false\n      },\n      axisLabel: {\n         color: 'white',\n         fontSize: 14\n      }\n   },\n   yAxis: {\n      type: 'value',\n      axisLabel: {\n         color: 'white',\n         fontSize: 14\n      },\n      splitLine: {\n         show: false\n      },\n      show: false\n   },\n   series: series,\n   //数据过多避免重叠\n   dataZoom: [\n      {\n         show: true,\n         height: 10,\n         xAxisIndex: [0],\n         bottom: 20,\n         showDetail: false,\n         borderColor: 'transparent',\n         textStyle: {\n            fontSize: 0,\n         },\n         endValue: 12 / datas.length, //从0开始的相当于5个x轴的数据\n         backgroundColor: 'rgba(0,0,0,0)', \n         borderWidth: 0,\n         handleSize: '0%',\n         handleStyle: {\n            color: '#d3dee5',\n         },\n      },\n   ]\n},\n  });\n  let echartsMapel = ref(\"\");\n  let opt = null;\n  const echartsMap = (e) => (echartsMapel.value = e);\n  const init = () => {\n    let myChart = echarts.init(echartsMapel.value);\n    myChart.setOption(state.option);\n    const setOption = (dataObj) => {\n      let opt = myChart.getOption();\n      Object.assign(opt, dataObj);\n      myChart.setOption(opt);\n    };\n    return setOption;\n  };\n  const handleRun = (val) => {\n    opt(val);\n  };\n  onMounted(() => {\n    setTimeout(() => {\n      opt = init();\n    }, 500);\n    window.addEventListener(\"resize\", () => {\n      opt();\n    });\n  });\n  <\/script>\n  \n  <style scoped >\n  .content {\n    position: relative;\n    width: 100%;\n    height: 100%;\n    box-shadow: 0px 3px 50px 1px rgba(0, 101, 175, 0.4);\n  }\n  #mainChina {\n    width: 100%;\n    height: 600px;\n    background-color: #00184F;\n  }\n  </style>\n  \n    \n    \n    \n    ",filletCorner:'\n    <template>\n    <div\n      class="content"\n   \n    >\n     <div :ref="echartsMap" id="mainChina"></div>\n    </div>\n  </template>\n  \n  <script setup>\n  import { ref, reactive, nextTick, onMounted, watch } from "vue";\n  import "echarts";\n  \n  const state = reactive({\n    option: {\n\n      //图表离容器的距离\n      grid: {\n         left: "10%",\n         top: "10%",\n         right: "10%",\n         bottom: "10%",\n      },\n      //X轴\n      xAxis: {\n         data: [\'库里\', \'科比\', \'詹姆斯\', \'乔丹\', \'杜兰特\', \'欧文\', \'威少\'],\n         axisLabel: {\n            textStyle: {\n               color: \'#D3E4FE\',\n               fontSize: 16\n            }\n         },\n         axisTick: {\n            show: false //隐藏X轴刻度尺\n         },\n  \n      axisLine: {\n        show: true,\n        lineStyle: {\n           color: \'#00A8FF\'\n        }\n     },\n      },\n      //y轴\n      yAxis: {\n        name:"(万元)", \n       \n        nameTextStyle: {\n            color:"#97B2E0",\n            padding:[0,0,-530,-10]\n        },\n        axisLabel: {\n          textStyle: {\n             color: \'#D3E4FE\',\n             fontSize: 16\n          }\n       },\n        axisTick:{\n          show:false\n      },\n      splitLine: {\n        show: false,\n       \n        },\n      axisLine: {\n        show: true,\n        lineStyle: {\n           color: \'#00A8FF\'\n        },\n        \n     },\n      },\n      series: [{\n         data: [2, 1, 4, 6, 1, 0, 1],\n         label: {\n            show: true,\n            position: "top",\n            distance: 0,\n            color: "#D3E4FE",\n            formatter: "{c}" + "MVP",\n            offset:[0,-5]\n         },\n         name: \'球星\',\n         //图表类型\n         //折线图line,饼图pie，散点图scatter等等\n         type: \'bar\',\n         barWidth: 30,\n         itemStyle: {\n            barBorderRadius: [20, 20, 0, 0],\n            color: {\n               x: 0,  //右\n               y: 0,  //下\n               x2: 0,  //左\n               y2: 1,  //上\n               colorStops: [\n                  {\n                     offset: 0.1,\n                     color: \'#00B4DB\' // 0% 处的颜色\n                  },\n                  {\n                     offset: 1,\n                     color: \'#0083B0\' // 100% 处的颜色\n                  }\n               ]\n            }\n         }\n      }]\n   }\n   \n  });\n  let echartsMapel = ref("");\n  let opt = null;\n  const echartsMap = (e) => (echartsMapel.value = e);\n  const init = () => {\n    let myChart = echarts.init(echartsMapel.value);\n    myChart.setOption(state.option);\n    const setOption = (dataObj) => {\n      let opt = myChart.getOption();\n      Object.assign(opt, dataObj);\n      myChart.setOption(opt);\n    };\n    return setOption;\n  };\n  \n  onMounted(() => {\n    init();\n  });\n  <\/script>\n  \n  <style scoped >\n  .content {\n    position: relative;\n    width: 100%;\n    box-shadow: 0px 3px 50px 1px rgba(0, 101, 175, 0.4);\n  }\n  #mainChina {\n    width: 100%;\n    height: 600px;\n    background-color: #00184F;\n  }\n  </style>\n  \n  \n    ',filletCornerAndLine:'\n   \n  \n   \n    <template>\n    <div\n      class="content"\n   \n    >\n     <div :ref="echartsMap" id="mainChina"></div>\n    </div>\n  </template>\n  \n  <script setup>\n  import { ref, reactive, nextTick, onMounted, watch } from "vue";\n  import "echarts";\n  \n  const state = reactive({\n    option: {\n  legend: {\n    data: ["贯通率", "球星", "经纪人"],\n    textStyle: {\n      color: "#B4B4B4",\n    },\n    left: "7%",\n    top:10,\n  },\n      //图表离容器的距离\n      grid: {\n         left: "10%",\n         top: "10%",\n         right: "10%",\n         bottom: "10%",\n      },\n        tooltip: {\n    trigger: "axis",\n    backgroundColor: "rgba(255,255,255,1)",\n    axisPointer: {\n      type: "shadow",\n      label: {\n        show: true,\n        backgroundColor: "#7B7DDC",\n      },\n    },\n  },\n      //X轴\n      xAxis: {\n         data: [\'库里\', \'科比\', \'詹姆斯\', \'乔丹\', \'杜兰特\', \'欧文\', \'威少\'],\n         axisLabel: {\n            textStyle: {\n               color: \'#D3E4FE\',\n               fontSize: 16\n            }\n         },\n         axisTick: {\n            show: false //隐藏X轴刻度尺\n         },\n  \n      axisLine: {\n        show: true,\n        lineStyle: {\n           color: \'#00A8FF\'\n        }\n     },\n      },\n      //y轴\n      yAxis:[\n       {\n        name:"(万元)", \n       \n        nameTextStyle: {\n            color:"#97B2E0",\n            padding:[0,0,-530,-10]\n        },\n        axisLabel: {\n          textStyle: {\n             color: \'#D3E4FE\',\n             fontSize: 16\n          }\n       },\n        axisTick:{\n          show:false\n      },\n      splitLine: {\n        show: false,\n       \n        },\n      axisLine: {\n        show: true,\n        lineStyle: {\n           color: \'#00A8FF\'\n        },\n        \n     },\n      },\n       {\n        name:"(个)", \n       \n        nameTextStyle: {\n            color:"#97B2E0",\n            padding:[0,0,-530,-10]\n        },\n        axisLabel: {\n          textStyle: {\n             color: \'#D3E4FE\',\n             fontSize: 16\n          }\n       },\n        axisTick:{\n          show:false\n      },\n      splitLine: {\n        show: false,\n       \n        },\n      axisLine: {\n        show: true,\n        lineStyle: {\n           color: \'#00A8FF\'\n        },\n        \n     },\n      }\n      ],\n      series: [\n          {\n      name: "贯通率",\n      type: "line",\n      smooth: true,\n      showAllSymbol: true,\n      symbol: "emptyCircle",\n      symbolSize: 8,\n      yAxisIndex: 1,\n      itemStyle: {\n        normal: {\n          color: "rgba(242, 157, 59, 1)",\n        },\n      },\n        data: [12, 21, 24, 61, 121, 0, 11],\n    },\n      {\n         data: [2, 1, 4, 6, 1, 0, 1],\n         label: {\n            show: true,\n            position: "top",\n            distance: 0,\n            color: "#D3E4FE",\n            formatter: "{c}",\n            offset:[0,-5]\n         },\n         name: \'球星\',\n         //图表类型\n         //折线图line,饼图pie，散点图scatter等等\n         type: \'bar\',\n         barWidth: 20,\n         itemStyle: {\n            barBorderRadius: [20, 20, 0, 0],\n            color: {\n               x: 0,  //右\n               y: 0,  //下\n               x2: 0,  //左\n               y2: 1,  //上\n               colorStops: [\n                  {\n                     offset: 0.1,\n                     color: \'rgba(48, 238, 255, 1)\' // 0% 处的颜色\n                  },\n                  {\n                     offset: 1,\n                     color:\'rgba(0, 152, 175, 1)\'  // 100% 处的颜色\n                  }\n               ]\n            }\n         }\n      },\n           {\n         data: [2, 1, 4, 6, 1, 0, 1],\n         label: {\n            show: true,\n            position: "top",\n            distance: 0,\n            color: "#D3E4FE",\n            formatter: "{c}",\n            offset:[0,-5]\n         },\n         name: \'经纪人\',\n         //图表类型\n         //折线图line,饼图pie，散点图scatter等等\n         type: \'bar\',\n         barWidth: 20,\n         itemStyle: {\n            barBorderRadius: [20, 20, 0, 0],\n            color: {\n               x: 0,  //右\n               y: 0,  //下\n               x2: 0,  //左\n               y2: 1,  //上\n               colorStops: [\n                  {\n                     offset: 0,\n                     color:\'rgba(59, 175, 255, 1)\'  // 0% 处的颜色\n                  },\n                  {\n                     offset: 1,\n                     color:  \'rgba(0, 72, 200, 1)\' // 100% 处的颜色\n                  }\n               ]\n            }\n         }\n      }\n      ]\n   }\n   \n  });\n  let echartsMapel = ref("");\n  let opt = null;\n  const echartsMap = (e) => (echartsMapel.value = e);\n  const init = () => {\n    let myChart = echarts.init(echartsMapel.value);\n    myChart.setOption(state.option);\n    const setOption = (dataObj) => {\n      let opt = myChart.getOption();\n      Object.assign(opt, dataObj);\n      myChart.setOption(opt);\n    };\n    return setOption;\n  };\n  \n  onMounted(() => {\n    init();\n  });\n  <\/script>\n  \n  <style scoped >\n  .content {\n    position: relative;\n    width: 100%;\n    box-shadow: 0px 3px 50px 1px rgba(0, 101, 175, 0.4);\n  }\n  #mainChina {\n    width: 100%;\n    height: 600px;\n    background-color: #00184F;\n  }\n  </style>\n  \n  \n    \n  \n  \n    \n  \n    ',filletCornerAndLine2:"\n   \n  \n   \n  \n   \n   \n  \n   \n    <template>\n    <div\n      class=\"content\"\n   \n    >\n     <div :ref=\"echartsMap\" id=\"mainChina\"></div>\n    </div>\n  </template>\n  \n  <script setup>\n  import { ref, reactive, nextTick, onMounted, watch } from \"vue\";\n  import \"echarts\";\n  let barData1 = [19, 9, 17, 19, 9, 17] //全停\nlet barData3 = [400, 300, 100, 400, 300, 100]//停运机组容量\n  const state = reactive({\n    option: {\n  legend: {\n    textStyle: {\n      color: \"#B4B4B4\",\n    },\n    left: \"7%\",\n    top:10,\n  },\n      //图表离容器的距离\n      grid: {\n         left: \"10%\",\n         top: \"10%\",\n         right: \"10%\",\n         bottom: \"10%\",\n      },\n        tooltip: {\n    trigger: \"axis\",\n    backgroundColor: \"rgba(255,255,255,1)\",\n    axisPointer: {\n      type: \"shadow\",\n      label: {\n        show: true,\n        backgroundColor: \"#7B7DDC\",\n      },\n    },\n  },\n      //X轴\n      xAxis: {\n         data: ['库里', '科比', '詹姆斯', '乔丹', '杜兰特', '欧文', '威少'],\n         axisLabel: {\n            textStyle: {\n               color: '#D3E4FE',\n               fontSize: 16\n            }\n         },\n         axisTick: {\n            show: false //隐藏X轴刻度尺\n         },\n  \n      axisLine: {\n        show: true,\n        lineStyle: {\n           color: '#00A8FF'\n        }\n     },\n      },\n      //y轴\n      yAxis:[\n    \n       {\n        name:\"(次)\", \n        nameTextStyle: {\n            color:\"#97B2E0\",\n            padding:[0,0,-530,-10]\n        },\n        axisLabel: {\n          textStyle: {\n             color: '#D3E4FE',\n             fontSize: 16\n          }\n       },\n        axisTick:{\n          show:false\n      },\n      splitLine: {\n        show: false,\n       \n        },\n      axisLine: {\n        show: true,\n        lineStyle: {\n           color: '#00A8FF'\n        },\n        \n     },\n      },\n         {\n        name:\"(%)\", \n         position: 'right', // 右侧 Y 轴\n        nameTextStyle: {\n            color:\"#97B2E0\",\n            padding:[0,0,-530,-10]\n        },\n        axisLabel: {\n          textStyle: {\n             color: '#D3E4FE',\n             fontSize: 16\n          }\n       },\n        axisTick:{\n          show:false\n      },\n      splitLine: {\n        show: false,\n       \n        },\n      axisLine: {\n        show: true,\n        lineStyle: {\n           color: '#00A8FF'\n        },\n        \n     },\n      },\n      ],\n      series: [\n   \n     {\n      //最低下的圆片左\n      name: '全停厂站',\n      yAxisIndex:0,\n      type: 'pictorialBar',\n      symbolSize: [15, 5],\n      symbolOffset: [-9, 2],\n      z: 0,\n      tooltip:{\n        show:false,\n      },\n      legend:{\n        show:false,\n      },\n      itemStyle: {\n        //lenged文本\n        color: 'rgba(59, 175, 255, 1)',\n      },\n\n      data: barData1,\n    },\n    {\n      //最低下的圆片右\n      name: '停运机组容量',\n        yAxisIndex:0, tooltip:{\n        show:false,\n      },\n         legend:{\n        show:false,\n      },\n      type: 'pictorialBar',\n      symbolSize: [15, 5],\n      symbolOffset: [9, 2],\n      z: 12,\n      itemStyle: {\n        //lenged文本\n        color: 'rgba(48, 238, 255, 0.32)',\n      },\n\n      data: barData1,\n    },\n    {\n      name: '全停', //中间头部1\n      type: 'pictorialBar', tooltip:{\n        show:false,\n      },\n         legend:{\n        show:false,\n      },\n      symbolSize: [15, 5],\n        yAxisIndex:0,\n      symbolOffset: [-9, -2],\n      symbolPosition: 'end',\n\n      z: 17,\n      itemStyle: {\n        //lenged文本\n        color: 'rgba(59, 175, 255, 1)',\n      },\n      data: barData1,\n    },\n    {\n        yAxisIndex:0,\n         tooltip:{\n        show:false,\n      },\n     \n      name: '停运机组容量', //中间头部2\n      type: 'pictorialBar',\n      symbolSize: [15, 5],\n      symbolOffset: [9, -2],\n      symbolPosition: 'end',\n\n      z: 17,\n      itemStyle: {\n        //lenged文本\n        color: 'rgba(48, 238, 255, 1)',\n      },\n      data: barData3,\n      yAxisIndex: 0, // 关联右边的第二个yAxis\n    },\n\n    {\n      name: '全停',\n        yAxisIndex:0,\n     \n      type: 'bar',\n      barWidth: 15,\n      stack: '停电厂数',\n      data: barData1,\n      itemStyle: {\n        //lenged文本\n        color: 'rgba(59, 175, 255, 0.30)',\n      },\n    },\n   \n    {\n      name: '停运机组容量',\n        yAxisIndex:0,\n      type: 'bar',\n      barWidth: 15,\n      stack: '停运机组容量',\n      data: barData3,\n     \n      itemStyle: {\n        //lenged文本\n\n        color: {\n          type: 'linear',\n          x: 0,\n          y: 0,\n          x2: 0,\n          y2: 1,\n          colorStops: [\n            {\n              offset: 0,\n              color: 'rgba(48, 238, 255, 0.32)', // 起始颜色\n            },\n            {\n              offset: 0.5,\n              color: 'rgba(48, 238, 255, 0.32)', // 结束颜色\n            },\n            {\n              offset: 1,\n              color: 'rgba(48, 238, 255, 0.32)', // 起始颜色\n            },\n          ],\n          global: false, // 缺省为 false\n        },\n      },\n    },\n\n           {\n      name: \"贯通率\",\n      yAxisIndex:1,\n      type: \"line\",\n      smooth: true,\n      showAllSymbol: true,\n      symbol: \"emptyCircle\",\n      symbolSize: 8,\n      yAxisIndex: 1,\n      itemStyle: {\n        normal: {\n          color: \"rgba(96, 255, 128, 1)\",\n        },\n      },\n        data: [12, 21, 24, 61, 121, 0, 11],\n    },\n      ]\n   }\n   \n  });\n  let echartsMapel = ref(\"\");\n  let opt = null;\n  const echartsMap = (e) => (echartsMapel.value = e);\n  const init = () => {\n    let myChart = echarts.init(echartsMapel.value);\n    myChart.setOption(state.option);\n    const setOption = (dataObj) => {\n      let opt = myChart.getOption();\n      Object.assign(opt, dataObj);\n      myChart.setOption(opt);\n    };\n    return setOption;\n  };\n  \n  onMounted(() => {\n    init();\n  });\n  <\/script>\n  \n  <style scoped >\n  .content {\n    position: relative;\n    width: 100%;\n    box-shadow: 0px 3px 50px 1px rgba(0, 101, 175, 0.4);\n  }\n  #mainChina {\n    width: 100%;\n    height: 600px;\n    background-color: #00184F;\n  }\n  </style>\n  \n  \n    \n  \n  \n    \n  \n    \n    \n    \n    \n    \n    ",line:"\n    <template>\n    <div\n      class=\"content\"\n   \n    >\n     <div :ref=\"echartsMap\" id=\"mainChina\"></div>\n    </div>\n  </template>\n  \n  <script setup>\n  import { ref, reactive, nextTick, onMounted, watch } from \"vue\";\n  import \"echarts\";\n  \n  const state = reactive({\n    option: {\n  \n        tooltip: {\n          trigger: 'axis'\n        },\n        legend: {\n          data: ['Email', 'Union Ads'],\n          textStyle: {\n            color: '#D3E4FE',\n            fontSize: 16,\n        },\n        left:20,\n        top: 10,\n        itemWidth: 15,\n        itemGap: 18,\n        itemHeight: 18,\n        },\n        grid: {\n          left: '3%',\n          right: '4%',\n          bottom: '3%',\n          containLabel: true\n        },\n    \n        xAxis: {\n          type: 'category',\n          axisTick: { show: false },\n          data: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'],\n          axisLabel: {\n            color: \"#97B2E0\",\n          },\n        },\n        yAxis: {\n          type: 'value',\n          name:\"(万元)\", \n         \n          nameTextStyle: {\n              color:\"#97B2E0\",\n              padding:[0,0,-550,-50]\n          },\n          axisLabel: {\n            color: \"#97B2E0\",\n          },\n          splitLine: {\n            show: true,\n            lineStyle: {\n                type: [1,2],\n                dashOffset: 1,\n                color: '#A4DAFF'\n            }\n        },\n        },\n        series: [\n          {\n            name: 'Email',\n            type: 'line',\n            stack: 'Total',\n            symbolSize: 10,\n            color:\"#00FFE4\",\n            smooth: true,\n            data: [120, 132, 101, 134, 90, 230, 210]\n          },\n          {\n            name: 'Union Ads',\n            type: 'line',\n            smooth: true,\n            symbolSize: 10,\n            color:\"#DE980F\",\n            stack: 'Total',\n            data: [220, 182, 191, 234, 290, 330, 310]\n          },\n          \n        ]\n      }\n  });\n  let echartsMapel = ref(\"\");\n  let opt = null;\n  const echartsMap = (e) => (echartsMapel.value = e);\n  const init = () => {\n    let myChart = echarts.init(echartsMapel.value);\n    myChart.setOption(state.option);\n    const setOption = (dataObj) => {\n      let opt = myChart.getOption();\n      Object.assign(opt, dataObj);\n      myChart.setOption(opt);\n    };\n    return setOption;\n  };\n  \n  onMounted(() => {\n    init();\n  });\n  <\/script>\n  \n  <style scoped >\n  .content {\n    position: relative;\n    width: 100%;\n    box-shadow: 0px 3px 50px 1px rgba(0, 101, 175, 0.4);\n  }\n  #mainChina {\n    width: 100%;\n    height: 600px;\n    background-color: #00184F;\n  }\n  </style>\n  \n  \n    ",linewaterfall:"\n    <template>\n    <div\n      class=\"content\"\n   \n    >\n     <div :ref=\"echartsMap\" id=\"mainChina\"></div>\n    </div>\n  </template>\n  \n  <script setup>\n  import { ref, reactive, nextTick, onMounted, watch } from \"vue\";\n  import \"echarts\";\n  \n  const state = reactive({\n    option: {\n  \n      tooltip: {\n        trigger: 'axis'\n      },\n  \n      grid: {\n        left: '3%',\n        right: '4%',\n        bottom: '3%',\n        containLabel: true\n      },\n  \n      xAxis: {\n        type: 'category',\n        axisTick: { show: false },\n        data: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'],\n        axisLabel: {\n          color: \"#97B2E0\",\n        },\n      },\n      yAxis: {\n        type: 'value',\n        name:\"(万元)\", \n       \n        nameTextStyle: {\n            color:\"#97B2E0\",\n            padding:[0,0,-550,-50]\n        },\n        axisLabel: {\n          color: \"#97B2E0\",\n        },\n        splitLine: {\n          show: true,\n          lineStyle: {\n              type: [1,2],\n              dashOffset: 1,\n              color: '#A4DAFF'\n          }\n      },\n      },\n      series: [\n        {\n          name: 'Email',\n          type: 'line',\n          stack: 'Total',\n          color:\"#00FFE4\",\n          smooth: true,\n          data: [120, 132, 101, 134, 90, 230, 210],\n                 areaStyle: {\n                    //新版渐变色实现\n                    color: {\n                       type: 'linear',\n                       x: 0,\n                       y: 0,\n                       x2: 0,\n                       y2: 1,\n                       colorStops: [\n                          {\n                             offset: 1,\n                             color: 'rgba(1, 180, 255, 0)'\n                          },\n                          {\n                             offset: 0,\n                             color: '#00FFE4'\n                          }\n                       ]\n                    }\n                  }\n        },\n      ]\n    }\n  });\n  let echartsMapel = ref(\"\");\n  let opt = null;\n  const echartsMap = (e) => (echartsMapel.value = e);\n  const init = () => {\n    let myChart = echarts.init(echartsMapel.value);\n    myChart.setOption(state.option);\n    const setOption = (dataObj) => {\n      let opt = myChart.getOption();\n      Object.assign(opt, dataObj);\n      myChart.setOption(opt);\n    };\n    return setOption;\n  };\n  \n  onMounted(() => {\n    init();\n  });\n  <\/script>\n  \n  <style scoped >\n  .content {\n    position: relative;\n    width: 100%;\n    box-shadow: 0px 3px 50px 1px rgba(0, 101, 175, 0.4);\n  }\n  #mainChina {\n    width: 100%;\n    height: 600px;\n    background-color: #00184F;\n  }\n  </style>\n  \n  \n    ",map1:'\n    <template>\n    <div>\n      <div :ref="echartsMap" id="mainChina"></div>\n    </div>\n  </template>\n  \n  <script setup lang="ts">\n  import { ref, reactive, nextTick, onMounted } from "vue";\n  import "echarts";\n  /*\n  基本数据类型\n  引用数据类型（复杂类型） 个人建议 ref初始化变量 \n  ref 和 reactive 本质我们可以简单的理解为ref是对reactive的二次包装, \n  ref定义的数据访问的时候要多一个.value\n  */\n  \n  let dataList = [\n    {\n      name: "城关街道",\n      value: [113.8107088, 35.4712497],\n    },\n    {\n      name: "百泉镇",\n      value: [113.795698, 35.4919147],\n    },\n    {\n      name: "常村镇",\n      value: [113.874372, 35.4956782],\n    },\n    {\n      name: "北云门镇",\n      value: [113.7461485, 35.441079],\n    },\n    {\n      name: "薄壁镇",\n      value: [113.5174156, 35.4518768],\n    },\n    {\n      name: "高庄乡",\n      value: [113.7638632, 35.5620524],\n    },\n    {\n      name: "洪洲乡",\n      value: [113.6938631, 35.5435154],\n    },\n    {\n      name: "胡桥街道",\n      value: [113.7968256, 35.4541455],\n    },\n    {\n      name: "黄水乡",\n      value: [113.6997486, 35.6046011],\n    },\n    {\n      name: "冀屯镇",\n      value: [113.6273246, 35.4022835],\n    },\n    {\n      name: "孟庄镇",\n      value: [113.8413238, 35.4384611, 33],\n    },\n    {\n      name: "南村镇",\n      value: [113.7517609, 35.6803057],\n    },\n    {\n      name: "南寨镇",\n      value: [113.7173013, 35.7773932],\n    },\n    {\n      name: "拍石头乡",\n      value: [113.813395, 35.6046644],\n    },\n    {\n      name: "沙窑乡",\n      value: [113.6623586, 35.7516994],\n    },\n    {\n      name: "上八里镇",\n      value: [113.6138788, 35.5452658],\n    },\n    {\n      name: "吴村镇",\n      value: [113.515562, 35.3705911],\n    },\n    {\n      name: "西平罗乡",\n      value: [113.7293585, 35.7251279],\n    },\n    {\n      name: "峪河镇",\n      value: [113.6011711, 35.3705153],\n    },\n    {\n      name: "占城镇",\n      value: [113.6976327, 35.3832827],\n    },\n    {\n      name: "张村乡",\n      value: [113.9066528, 35.5367755],\n    },\n    {\n      name: "赵固乡",\n      value: [113.6880663, 35.4486989],\n    },\n  ];\n  \n  var countrys = function(name, color, value) {\n    return {\n      name: name,\n      value: value,\n    };\n  };\n  \n  let echartsMapel: any = ref("");\n  const echartsMap = (e: any) => (echartsMapel.value = e);\n  const init = (china) => {\n    // 基于准备好的dom，初始化echarts实例\n  \n    var countryData = [];\n    var names = [];\n    china.features.forEach((res) => {\n      countryData.push(countrys(res.properties.name, "#ff5428", 10));\n      names.push(res.properties.name);\n    });\n    console.log(names);\n    echarts.registerMap("新乡辉县", china as any);\n    var myChart = echarts.init(echartsMapel.value);\n    // 指定图表的配置项和数据\n    var options: any = {\n      geo: {\n        map: "新乡辉县",\n        zoom: 1,\n        show: true,\n        roam: true,\n        label: {\n          normal: {\n            show: false,\n          },\n          emphasis: {\n            show: false,\n          },\n        },\n      },\n      series: [\n        {\n          name: "",\n          type: "map",\n          geoIndex: 2,\n          map: "新乡辉县",\n          mapType: "world",\n          //    layoutCenter: ["50%", "50%"], //地图位置\n          //    layoutSize: "160%",\n          roam: true,\n          itemStyle: {\n            borderColor: "#fff",\n            areaColor: "#ff5428",\n          },\n  \n          label: {\n            show: true,\n            formatter: function(params) {\n              return params.data.name;\n            },\n            color: "#fff",\n            fontSize: 10,\n          },\n          select: {\n            itemStyle: {\n              areaColor: "#7f1100",\n            },\n            label: {\n              show: true,\n              color: "#fff",\n            },\n          },\n          emphasis: {\n            itemStyle: {\n              areaColor: "#7f1100",\n            },\n            label: {\n              show: true,\n              color: "#fff",\n            },\n          },\n          data: countryData,\n        },\n        {\n          label: {\n            normal: {\n              position: "left",\n              color: "#FFF",\n              show: false, //是否显示地名\n              formatter: function(params) {\n                return params.name;\n              },\n            },\n            emphasis: {\n              show: true,\n            },\n          },\n          zlevel: 2,\n          rippleEffect: {\n            //涟漪特效\n            period: 4, //动画时间，值越小速度越快\n            brushType: "fill", //波纹绘制方式 stroke, fill\n            scale: 6, //波纹圆环最大限制，值越大波纹越大\n          },\n          symbol: "circle",\n          symbolSize: 4,\n          symbolSize: function(val) {\n            return val[2] / 3;\n          },\n          itemStyle: {},\n          color: "#FFD768",\n          type: "effectScatter",\n          coordinateSystem: "geo",\n          data: dataList.map((res) => {\n            res.value.push(22);\n            return res;\n          }),\n        },\n      ],\n  \n      tooltip: {\n        trigger: "item",\n      },\n    };\n    // 使用刚指定的配置项和数据显示图表。\n    myChart.setOption(options);\n  };\n  const state = reactive({});\n  onMounted(() => {\n    fetch("/vue.example/echarts/hui_xian.json")\n      .then(function(response) {\n        //response.status表示响应的http状态码\n        if (response.status === 200) {\n          // json是返回的response提供的一个方法,\n          // 会把返回的json字符串反序列化成对象,也被包装成一个Promise了\n          return response.json();\n          //\n        } else {\n          return {};\n        }\n      })\n      .then(function(data) {\n        //响应的内容\n        init(data);\n        // 响应数据格式化\n      });\n  });\n  <\/script>\n  \n  <style scoped>\n  .content {\n    position: relative;\n    width: 100%;\n    box-shadow: 0px 3px 50px 1px rgba(0, 101, 175, 0.4);\n  }\n  #mainChina {\n    width: 100%;\n    height: 600px;\n    background-color: #00184f;\n  }\n  </style>\n  \n    ',mapGradient:'\n\n\n    <template>\n  <div>\n    <div :ref="echartsMap" id="mainChina"></div>\n  </div>\n</template>\n\n<script setup lang="ts">\nimport { ref, reactive, nextTick, onMounted } from "vue";\nimport "echarts";\n/*\n基本数据类型\n引用数据类型（复杂类型） 个人建议 ref初始化变量 \nref 和 reactive 本质我们可以简单的理解为ref是对reactive的二次包装, \nref定义的数据访问的时候要多一个.value\n*/\nlet dataList = [\n  {\n    name: "南海诸岛",\n    value: 100,\n    eventTotal: 100,\n    specialImportant: 10,\n    import: 10,\n    compare: 10,\n    common: 40,\n    specail: 20,\n  },\n  {\n    name: "海南省",\n    value: 100,\n    eventTotal: 100,\n    specialImportant: 10,\n    import: 10,\n    compare: 10,\n    common: 40,\n    specail: 20,\n  },\n  {\n    name: "北京市",\n    value: 540,\n  },\n  {\n    name: "天津市",\n    value: 130,\n  },\n  {\n    name: "上海市",\n    value: 400,\n  },\n  {\n    name: "重庆市",\n    value: 750,\n  },\n  {\n    name: "河北省",\n    value: 130,\n  },\n  {\n    name: "河南省",\n    value: 830,\n  },\n  {\n    name: "云南省",\n    value: 110,\n  },\n  {\n    name: "辽宁省",\n    value: 19,\n  },\n  {\n    name: "黑龙江省",\n    value: 150,\n  },\n  {\n    name: "湖南省",\n    value: 690,\n  },\n  {\n    name: "安徽省",\n    value: 60,\n  },\n  {\n    name: "山东省",\n    value: 39,\n  },\n  {\n    name: "新疆维吾尔自治区",\n    value: 4,\n  },\n  {\n    name: "江苏省",\n    value: 31,\n  },\n  {\n    name: "浙江省",\n    value: 104,\n  },\n  {\n    name: "江西省",\n    value: 36,\n  },\n  {\n    name: "湖北省",\n    value: 52,\n  },\n  {\n    name: "广西壮族自治区",\n    value: 33,\n  },\n  {\n    name: "甘肃省",\n    value: 7,\n  },\n  {\n    name: "山西省",\n    value: 5,\n  },\n  {\n    name: "内蒙古自治区",\n    value: 778,\n  },\n  {\n    name: "陕西省",\n    value: 22,\n  },\n  {\n    name: "吉林省",\n    value: 4,\n  },\n  {\n    name: "福建省",\n    value: 18,\n  },\n  {\n    name: "贵州省",\n    value: 5,\n  },\n  {\n    name: "广东省",\n    value: 98,\n  },\n  {\n    name: "青海省",\n    value: 1,\n  },\n  {\n    name: "西藏自治区",\n    value: 0,\n  },\n  {\n    name: "四川省",\n    value: 44,\n  },\n  {\n    name: "宁夏回族自治区",\n    value: 4,\n  },\n\n  {\n    name: "台湾省",\n    value: 3,\n  },\n  {\n    name: "香港省",\n    value: 5,\n  },\n  {\n    name: "澳门省",\n    value: 555,\n  },\n];\nlet echartsMapel: any = ref("");\nconst echartsMap = (e: any) => (echartsMapel.value = e);\nconst init = (china) => {\n  // 基于准备好的dom，初始化echarts实例\n  echarts.registerMap("china", china as any);\n  var myChart = echarts.init(echartsMapel.value);\n  // 指定图表的配置项和数据\n  var options: any = {\n    series: [\n      {\n        type: "map",\n        roam: true,\n        zoom: 1.2,\n        map: "china",\n        top: 100,\n        left:200,\n        tooltip: {\n          padding: 8,\n          borderWidth: 1,\n          borderColor: "#409eff",\n          backgroundColor: "rgba(255,255,255,0.7)",\n          textStyle: {\n            color: "#000000",\n            fontSize: 13,\n          },\n          formatter: function (e, t, n) {\n            let data = e.data;\n            //模拟数据\n            data.specialImportant = (Math.random() * 1000) | 0;\n            data.import = (Math.random() * 1000) | 0;\n            data.compare = (Math.random() * 1000) | 0;\n            data.common = (Math.random() * 1000) | 0;\n            data.specail = (Math.random() * 1000) | 0;\n\n            let context = "<div> <p><b style=\'font-size:15px;\'>"+data.name+"</b>(2020年第一季度)</p> ";\n            return context;\n          },\n        },\n      },\n    ],\n\n    tooltip: {\n      trigger: "item",\n    },\n\n    visualMap: {\n      //地图图例\n      show: true,\n      right:226,\n      bottom:210,\n      showLabel: true,\n      textStyle:{\n           color:"rgba(211, 228, 254, 1)",\n      },\n      pieces: [\n        //根据数据大小，各省显示不同颜色\n        {\n          gte: 100,\n          label: ">= 1000",\n          color: "rgba(0, 110, 221, 1)",\n        },\n         {\n          gte: 50,\n          lt: 100,\n          label: "500 - 999",\n          color: "rgba(69, 184, 232, 1)",\n        },\n        {\n          gte: 30,\n          lt: 50,\n          label: "500 - 999",\n          color: "rgba(69, 155, 232, 1)",\n        },\n        {\n          gte: 20,\n          lt: 30,\n          label: "100 - 499",\n          color: "rgba(122, 189, 240, 1)",\n        },\n        {\n          gte: 10,\n          lt: 20,\n          label: "10 - 99",\n          color: "rgba(167, 218, 246, 1)",\n        },\n        {\n          lt: 10,\n          label: "<10",\n          color: "rgba(211, 228, 254, 1)",\n        },\n      ],\n    },\n  };\n  options.series[0]["data"] = dataList;\n  // 使用刚指定的配置项和数据显示图表。\n  myChart.setOption(options);\n};\nconst state = reactive({});\nonMounted(() => {\n  fetch("/vue.example/echarts/100000_full.json").then(function (response) {\n    //response.status表示响应的http状态码\n    if (response.status === 200) {\n        // json是返回的response提供的一个方法,\n        // 会把返回的json字符串反序列化成对象,也被包装成一个Promise了\n     return response.json()\n        //\n    } else {\n        return {};\n    }\n})    .then(function (data) {\n        //响应的内容\n        console.log(data);\n         init(data);\n        // 响应数据格式化\n    });\n \n});\n<\/script>\n  \n  <style scoped >\n  .content {\n    position: relative;\n    width: 100%;\n    box-shadow: 0px 3px 50px 1px rgba(0, 101, 175, 0.4);\n  }\n  #mainChina {\n    width: 100%;\n    height: 600px;\n    background-color: #00184F;\n  }\n  </style>\n  \n  \n    \n  \n  \n    \n    \n  \n  \n    \n    ',pointerEcharts:"\n\n    <template>\n    <div\n      class=\"content\"\n   \n    >\n     <div :ref=\"echartsMap\" id=\"mainChina\"></div>\n    </div>\n  </template>\n  \n  <script setup>\n  import { ref, reactive, nextTick, onMounted, watch } from \"vue\";\n  import \"echarts\";\n  let value = 20.66;\nlet title = '%';\n  const state = reactive({\n    option:{\n    series: [\n        {\n            name: '内层数据刻度',\n            type: 'gauge',\n            radius: '80%',\n            center: ['50%', '50%'],\n            axisLine: {\n              roundCap :false,\n                lineStyle: {\n                    width: 30,\n                    color: [\n\n                        [1,new echarts.graphic.LinearGradient(\n                  0,0, 1, 0, [\n                  {\n                     offset: 0,\n                     color: '#1D71EF',\n                  },\n                  {\n                     offset: 1,\n                     color:'#4FD2FD',\n                  }\n                  ]\n                )]\n                    ],\n                    \n                }\n            },\n            splitLine: {\n                length: 25,\n                 distance:-30,\n                lineStyle: {\n                    width: 5,\n                    color: '#ffffff'\n                }\n            },\n            axisTick: {\n               \n              distance:-30,\n                lineStyle: {\n                    width: 2,\n                    color: '#ffffff'\n                }\n            },\n            axisLabel: {\n                color: '#AAC0EE',\n                distance: 40,\n                fontSize: 20,\n            },\n            title: { //标题\n                show: true,\n                offsetCenter: [0, 84], // x, y，单位px\n                textStyle: {\n                    color: \"red\",\n                    fontSize: 14, //表盘上的标题文字大小\n                }\n            },\n            detail: {\n                show: true,\n                offsetCenter: ['0','90%'],\n                fontSize: 20,\n                color: '#26C0C8'\n            },\n            itemStyle: {\n                normal: {\n                    color: '#0EB6CC'\n                }\n            },\n            pointer: {\n                width: 6,\n                length: '55%',\n                itemStyle:{\n                  color:\"#E1F5FF\"\n                }\n            },\n           \n            data: [\n            {\n                name: \"\",\n                value: 30\n            },\n              \n            ],\n            silent: false\n        },\n  \n    ]\n}\n    \n  });\n  let echartsMapel = ref(\"\");\n  let opt = null;\n  const echartsMap = (e) => (echartsMapel.value = e);\n  const init = () => {\n    let myChart = echarts.init(echartsMapel.value);\n    myChart.setOption(state.option);\n    const setOption = (dataObj) => {\n      let opt = myChart.getOption();\n      Object.assign(opt, dataObj);\n      myChart.setOption(opt);\n    };\n    return setOption;\n  };\n  \n  onMounted(() => {\n    init();\n  });\n  <\/script>\n  \n  <style scoped >\n  .content {\n    position: relative;\n    width: 100%;\n    box-shadow: 0px 3px 50px 1px rgba(0, 101, 175, 0.4);\n  }\n  #mainChina {\n    width: 100%;\n    height: 600px;\n    background-color: #00184F;\n  }\n  </style>\n  \n  \n    \n    \n  \n  \n    \n    \n    \n  \n  \n    \n    ",taperBar:'\n   \n    <template>\n    <div\n      class="content"\n   \n    >\n     <div :ref="echartsMap" id="mainChina"></div>\n    </div>\n  </template>\n  \n  <script setup>\n  import { ref, reactive, nextTick, onMounted, watch } from "vue";\n  import "echarts";\n  \n  const state = reactive({\n    option:  {\n   //   backgroundColor:"#0F285C",\n   grid: {\n      containLabel: true,\n      top: 30,\n      right: 15,\n      bottom: 30,\n      left: 15\n   },\n   tooltip: {\n      trigger: "axis",\n      axisPointer: {\n         type: \'none\'\n      },\n   \n      extraCssText: \'opacity: 0.8;background-color:#050F1B;padding:16px;box-shadow: 1px 6px 15px 1px rgba(0,0,0,0.13);border-radius: 4px;filter: blur(undefinedpx);border:none;\'\n   },\n   xAxis: {\n      // 类目轴\n      type: "category",\n      data: [\'Mon\', \'Tue\', \'Wed\', \'Thu\', \'Fri\', \'Sat\', \'Sun\'],\n      axisTick: {\n         show: false //隐藏X轴刻度\n      },\n      \n      axisLine: {\n         lineStyle: {\n            color: "rgba(87, 206, 234, 1)"\n         }\n      },\n      axisLabel: {\n          color: "#D3E4FE",\n        },\n   },\n   yAxis: {\n      type: \'value\',\n        name:"(个)", \n              axisLine: {\n              show: true,\n              lineStyle: {\n                 color: \'#00A8FF\'\n              }\n           },\n\n\n        nameTextStyle: {\n            color:"#97B2E0",\n            padding:[0,0,-560,-50]\n        },\n        boundaryGap: [0, 0.01],\n\n        splitLine: {\n          lineStyle: {\n            color: "#073370",\n            width: 1,\n            type: "dashed",\n          },\n        },\n        axisLabel: {\n          color: "#D3E4FE",\n        },\n        axisLine: {\n          lineStyle: {\n            color: "#073370",\n            width: 1,\n          },\n        },\n   },\n   series: [\n      {\n         type: "pictorialBar",\n          barWidth: "80",\n         barCategoryGap: "12%",\n         label: {\n            normal: {\n               show: true,\n               position: "top",\n               textStyle: {\n                  color: "#FFFFFF",\n                  fontSize: 12\n               }\n            }\n         },\n         itemStyle: {\n            normal: {\n               color: {\n                  type: "linear",\n                  x: 0,\n                  y: 0,\n                  x2: 0,\n                  y2: 1,\n                  colorStops: [\n                     {\n                        offset: 0,\n                        color: "#2BCEFF"  // 0% 处的颜色\n                     },\n                     {\n                        offset: 1,\n                        color: "rgba(43, 206, 255, 0)" // 100% 处的颜色\n                     }\n                  ],\n                  globalCoord: false // 缺省为 false\n               } //渐变颜色\n            }\n         },\n   \n         symbol:\n            "path://M12.000,-0.000 C12.000,-0.000 16.074,60.121 22.731,60.121 C26.173,60.121 -3.234,60.121 0.511,60.121 C7.072,60.121 12.000,-0.000 12.000,-0.000 Z",\n\n         data: [132, 66, 54, 37, 88, 136, 12]\n      }\n   ]\n},\n  });\n  let echartsMapel = ref("");\n  let opt = null;\n  const echartsMap = (e) => (echartsMapel.value = e);\n  const init = () => {\n    let myChart = echarts.init(echartsMapel.value);\n    myChart.setOption(state.option);\n    const setOption = (dataObj) => {\n      let opt = myChart.getOption();\n      Object.assign(opt, dataObj);\n      myChart.setOption(opt);\n    };\n    return setOption;\n  };\n  \n  onMounted(() => {\n    init();\n  });\n  <\/script>\n  \n  <style scoped >\n  .content {\n    position: relative;\n    width: 100%;\n    box-shadow: 0px 3px 50px 1px rgba(0, 101, 175, 0.4);\n  }\n  #mainChina {\n    width: 100%;\n    height: 600px;\n    background-color: #00184F;\n  }\n  </style>\n  \n  \n    \n    ',worldMap1:"\n\n\n\n\n\n\n    <template>\n  <div>\n    <div :ref=\"echartsMap\" id=\"mainChina\"></div>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport { ref, reactive, nextTick, onMounted } from \"vue\";\nimport \"echarts\";\n/*\n基本数据类型\n引用数据类型（复杂类型） 个人建议 ref初始化变量 \nref 和 reactive 本质我们可以简单的理解为ref是对reactive的二次包装, \nref定义的数据访问的时候要多一个.value 104.1276279°，纬度30.5370628°\n*/\nvar geoCoordMap = {'阿富汗':[67.709953,33.93911],'安哥拉':[17.873887,-11.202692],'阿尔巴尼亚':[20.168331,41.153332],'阿联酋':[53.847818,23.424076],'阿根廷':[-63.61667199999999,-38.416097],'亚美尼亚':[45.038189,40.069099],'法属南半球和南极领地':[69.348557,-49.280366],'澳大利亚':[133.775136,-25.274398],'奥地利':[14.550072,47.516231],'阿塞拜疆':[47.576927,40.143105],'布隆迪':[29.918886,-3.373056],'比利时':[4.469936,50.503887],'贝宁':[2.315834,9.30769],'布基纳法索':[-1.561593,12.238333],'孟加拉国':[90.356331,23.684994],'保加利亚':[25.48583,42.733883],'巴哈马':[-77.39627999999999,25.03428],'波斯尼亚和黑塞哥维那':[17.679076,43.915886],'白俄罗斯':[27.953389,53.709807],'伯利兹':[-88.49765,17.189877],'百慕大':[-64.7505,32.3078],'玻利维亚':[-63.58865299999999,-16.290154],'巴西':[-51.92528,-14.235004],'文莱':[114.727669,4.535277],'不丹':[90.433601,27.514162],'博茨瓦纳':[24.684866,-22.328474],'中非共和国':[20.939444,6.611110999999999],'加拿大':[-106.346771,56.130366],'瑞士':[8.227511999999999,46.818188],'智利':[-71.542969,-35.675147],\n'中国':[88.8946661,37.0731642],'象牙海岸':[-5.547079999999999,7.539988999999999],'喀麦隆':[12.354722,7.369721999999999],'刚果民主共和国':[21.758664,-4.038333],'刚果共和国':[15.827659,-0.228021],'哥伦比亚':[-74.297333,4.570868],'哥斯达黎加':[-83.753428,9.748916999999999],'古巴':[-77.781167,21.521757],'北塞浦路斯':[33.429859,35.126413],'塞浦路斯':[33.429859,35.126413],'捷克共和国':[15.472962,49.81749199999999],'德国':[10.451526,51.165691],'吉布提':[42.590275,11.825138],'丹麦':[9.501785,56.26392],'多明尼加共和国':[-70.162651,18.735693],'阿尔及利亚':[1.659626,28.033886],'厄瓜多尔':[-78.18340599999999,-1.831239],'埃及':[30.802498,26.820553],'厄立特里亚':[39.782334,15.179384],'西班牙':[-3.74922,40.46366700000001],'爱沙尼亚':[25.013607,58.595272],'埃塞俄比亚':[40.489673,9.145000000000001],'芬兰':[25.748151,61.92410999999999],'斐':[178.065032,-17.713371],'福克兰群岛':[-59.523613,-51.796253],'法国':[2.213749,46.227638],'加蓬':[11.609444,-0.803689],'英国':[-3.435973,55.378051],'格鲁吉亚':[-82.9000751,32.1656221],'加纳':[-1.023194,7.946527],'几内亚':[-9.696645,9.945587],'冈比亚':[-15.310139,13.443182],'几内亚比绍':[-15.180413,11.803749],'赤道几内亚':[10.267895,1.650801],'希腊':[21.824312,39.074208],'格陵兰':[-42.604303,71.706936],'危地马拉':[-90.23075899999999,15.783471],'法属圭亚那':[-53.125782,3.933889],'圭亚那':[-58.93018,4.860416],'洪都拉斯':[-86.241905,15.199999],'克罗地亚':[15.2,45.1],'海地':[-72.285215,18.971187],'匈牙利':[19.503304,47.162494],'印尼':[113.921327,-0.789275],\n'印度':[78.5553853,12.0201385],'爱尔兰':[-8.24389,53.41291],'伊朗':[53.688046,32.427908],'伊拉克':[43.679291,33.223191],'冰岛':[-19.020835,64.963051],'以色列':[34.851612,31.046051],'意大利':[12.56738,41.87194],'牙买加':[-77.297508,18.109581],'约旦':[36.238414,30.585164],\n'日本':[142.1364432,44.8147265 ],\n'新加坡':[101.7727739,-0.0589018],\n'哈萨克斯坦':[66.923684,48.019573],'肯尼亚':[37.906193,-0.023559],'吉尔吉斯斯坦':[74.766098,41.20438],'柬埔寨':[104.990963,12.565679],'韩国':[127.766922,35.907757],'科索沃':[20.902977,42.6026359],'科威特':[47.481766,29.31166],'老挝':[102.495496,19.85627],'黎巴嫩':[35.862285,33.854721],'利比里亚':[-9.429499000000002,6.428055],'利比亚':[17.228331,26.3351],'斯里兰卡':[80.77179699999999,7.873053999999999],'莱索托':[28.233608,-29.609988],'立陶宛':[23.881275,55.169438],'卢森堡':[6.129582999999999,49.815273],'拉脱维亚':[24.603189,56.879635],'摩洛哥':[-7.092619999999999,31.791702],'摩尔多瓦':[28.369885,47.411631],'马达加斯加':[46.869107,-18.766947],'墨西哥':[-102.552784,23.634501],'马其顿':[21.745275,41.608635],'马里':[-3.996166,17.570692],'缅甸':[95.956223,21.913965],'黑山':[19.37439,42.708678],'蒙古':[103.846656,46.862496],'莫桑比克':[35.529562,-18.665695],'毛里塔尼亚':[-10.940835,21.00789],'马拉维':[34.301525,-13.254308],'马来西亚':[101.975766,4.210484],'纳米比亚':[18.49041,-22.95764],'新喀里多尼亚':[165.618042,-20.904305],'尼日尔':[8.081666,17.607789],'尼日利亚':[8.675277,9.081999],'尼加拉瓜':[-85.207229,12.865416],'荷兰':[5.291265999999999,52.132633],'挪威':[8.468945999999999,60.47202399999999],'尼泊尔':[84.12400799999999,28.394857],'新西兰':[174.885971,-40.900557],'阿曼':[55.923255,21.512583],'巴基斯坦':[69.34511599999999,30.375321],'巴拿马':[-80.782127,8.537981],'秘鲁':[-75.015152,-9.189967],'菲律宾':[121.774017,12.879721],'巴布亚新几内亚':[143.95555,-6.314992999999999],'波兰':[19.145136,51.919438],'波多黎各':[-66.590149,18.220833],'北朝鲜':[127.510093,40.339852],'葡萄牙':[-8.224454,39.39987199999999],'巴拉圭':[-58.443832,-23.442503],'卡塔尔':[51.183884,25.354826],'罗马尼亚':[24.96676,45.943161],'俄罗斯':[105.318756,61.52401],'卢旺达':[29.873888,-1.940278],'西撒哈拉':[-12.885834,24.215527],'沙特阿拉伯':[45.079162,23.885942],'苏丹':[30.217636,12.862807],'南苏丹':[31.3069788,6.876991899999999],'塞内加尔':[-14.452362,14.497401],'所罗门群岛':[160.156194,-9.64571],'塞拉利昂':[-11.779889,8.460555],'萨尔瓦多':[-88.89653,13.794185],'索马里兰':[46.8252838,9.411743399999999],'索马里':[46.199616,5.152149],'塞尔维亚共和国':[21.005859,44.016521],'苏里南':[-56.027783,3.919305],'斯洛伐克':[19.699024,48.669026],'斯洛文尼亚':[14.995463,46.151241],'瑞典':[18.643501,60.12816100000001],'斯威士兰':[31.465866,-26.522503],'叙利亚':[38.996815,34.80207499999999],'乍得':[18.732207,15.454166],'多哥':[0.824782,8.619543],'泰国':[100.992541,15.870032],'塔吉克斯坦':[71.276093,38.861034],'土库曼斯坦':[59.556278,38.969719],'东帝汶':[125.727539,-8.874217],'特里尼达和多巴哥':[-61.222503,10.691803],'突尼斯':[9.537499,33.886917],'土耳其':[35.243322,38.963745],'坦桑尼亚联合共和国':[34.888822,-6.369028],'乌干达':[32.290275,1.373333],'乌克兰':[31.16558,48.379433],'乌拉圭':[-55.765835,-32.522779],'美国':[-95.712891,37.09024],'乌兹别克斯坦':[64.585262,41.377491],'委内瑞拉':[-66.58973,6.42375],'越南':[108.277199,14.058324],'瓦努阿图':[166.959158,-15.376706],'西岸':[35.3027226,31.9465703],'也门':[48.516388,15.552727],'南非':[22.937506,-30.559482],'赞比亚':[27.849332,-13.133897],'津巴布韦':[29.154857,-19.015438]};\nvar data_tmp = [\n    { name: '法国', value: 42 },\n       { name: '新加坡', value: 42 },\n         { name: '澳大利亚', value: 42 },\n      { name: '美国', value: 42 },\n     { name: '墨西哥', value: 42 },\n    { name: '日本', value: 81 }];\nvar max = 480,\n    min = 9; // todo\nvar maxSize4Pin = 100,\n    minSize4Pin = 20;\n\nvar convertData = function (data) {\n    var res = [];\n    for (var i = 0; i < data.length; i++) {\n        var geoCoord = geoCoordMap[data[i].name];\n        if (geoCoord) {\n            res.push({\n                name: data[i].name,\n                value: geoCoord.concat(data[i].value),\n                color:\"#c48\"\n            });\n        }\n    }\n    return res;\n};\nlet echartsMapel: any = ref(\"\");\nconst echartsMap = (e: any) => (echartsMapel.value = e);\nconst init = (china) => {\n  // 基于准备好的dom，初始化echarts实例\n  echarts.registerMap(\"world\", china as any);\n  var myChart = echarts.init(echartsMapel.value);\n  // 指定图表的配置项和数据\n  var options: any = {\n        geo: {\n        map: 'world',\n        zoom: 1,\n        show: true,\n        roam: true,\n        label: {\n            normal: {\n                show: false,\n            },\n            emphasis: {\n                show: false,\n            },\n        },\n        itemStyle: {\n            normal: {\n                areaColor: '#01B7F9',\n              //  borderColor: '#01B7F9', //线\n                shadowColor: '#01B7F9', //外发光\n                shadowBlur: 1,\n            },\n            emphasis: {\n                areaColor: '#01B7F9', //悬浮区背景\n            },\n        },\n    },\n    series: [\n      {\n        type: 'map',\n        mapType: 'world',\n        itemStyle: {\n            areaColor: '#01B7F9',\n        },\n        emphasis: {\n            itemStyle: {\n                areaColor: '#E8D3E3'\n            }\n        },\n        data: [{\n        name: \"中国\",\n        itemStyle: {\n            borderColor: '#68FAFF',\n            areaColor:'#68FAFF',\n        },\n        emphasis: {\n            itemStyle: {\n                areaColor: '#2585a6'\n            },\n            label: {\n                show: true,\n                color: '#fff',\n            }\n        },\n    }]\n    },\n         {\n            symbolSize: 5,\n            label: {\n                normal: {\n                    position: 'top',\n                    show: true,//是否显示地名\n                                \n                              formatter: function(params) {\n                                console.log(params)\n                        return '{a| '+params.name+':'+params.value[2]+'}';\n                      },\n                      rich: {\n                        a: {\n                          color: \"#FFF\",\n                          fontSize: 12,\n                          align: \"center\",\n                         padding:[5,8],\n                          backgroundColor:\"#F29100\",\n                           borderRadius:5,\n                          fontWeight: 600,\n                        }, \n                    \n                      },\n                },\n                emphasis: {\n                    show: true,\n                },\n            },\n            itemStyle: {\n                normal: {\n                   borderColor:\"#FFF\",\n                    color: 'rgba(242, 145, 0, 1)',\n                },\n            },\n            name: 'light',\n            type: 'scatter',\n            coordinateSystem: 'geo',\n            data:convertData(data_tmp),\n        },\n    ],\n\n    tooltip: {\n      show:false,\n      trigger: \"item\",\n    },\n\n  };\n  // 使用刚指定的配置项和数据显示图表。\n  myChart.setOption(options);\n};\nconst state = reactive({});\nonMounted(() => {\n  fetch(\"/vue.example/echarts/ChinaCenterWorld.json\").then(function (response) {\n    //response.status表示响应的http状态码\n    if (response.status === 200) {\n        // json是返回的response提供的一个方法,\n        // 会把返回的json字符串反序列化成对象,也被包装成一个Promise了\n     return response.json()\n        //\n    } else {\n        return {};\n    }\n})    .then(function (data) {\n        //响应的内容\n         init(data);\n        // 响应数据格式化\n    });\n \n});\n<\/script>\n  \n  <style scoped >\n  .content {\n    position: relative;\n    width: 100%;\n    box-shadow: 0px 3px 50px 1px rgba(0, 101, 175, 0.4);\n  }\n  #mainChina {\n    width: 100%;\n    height: 600px;\n    background-color: #00184F;\n  }\n  </style>\n  \n\n    ",worldMap2:'\n\n    <template>\n    <div>\n      <div :ref="echartsMap" id="mainChina"></div>\n    </div>\n  </template>\n  \n  <script setup lang="ts">\n  import { ref, reactive, nextTick, onMounted } from "vue";\n  import "echarts";\n  /*\n    基本数据类型\n    引用数据类型（复杂类型） 个人建议 ref初始化变量 \n    ref 和 reactive 本质我们可以简单的理解为ref是对reactive的二次包装, \n    ref定义的数据访问的时候要多一个.value 104.1276279°，纬度30.5370628°\n    */\n  var geoCoordMap = {\n    阿富汗: [67.709953, 33.93911],\n    安哥拉: [17.873887, -11.202692],\n    阿尔巴尼亚: [20.168331, 41.153332],\n    阿联酋: [53.847818, 23.424076],\n    阿根廷: [-63.61667199999999, -38.416097],\n    亚美尼亚: [45.038189, 40.069099],\n    法属南半球和南极领地: [69.348557, -49.280366],\n    澳大利亚: [133.775136, -25.274398],\n    奥地利: [14.550072, 47.516231],\n    阿塞拜疆: [47.576927, 40.143105],\n    布隆迪: [29.918886, -3.373056],\n    比利时: [4.469936, 50.503887],\n    贝宁: [2.315834, 9.30769],\n    布基纳法索: [-1.561593, 12.238333],\n    孟加拉国: [90.356331, 23.684994],\n    保加利亚: [25.48583, 42.733883],\n    巴哈马: [-77.39627999999999, 25.03428],\n    波斯尼亚和黑塞哥维那: [17.679076, 43.915886],\n    白俄罗斯: [27.953389, 53.709807],\n    伯利兹: [-88.49765, 17.189877],\n    百慕大: [-64.7505, 32.3078],\n    玻利维亚: [-63.58865299999999, -16.290154],\n    巴西: [-51.92528, -14.235004],\n    文莱: [114.727669, 4.535277],\n    不丹: [90.433601, 27.514162],\n    博茨瓦纳: [24.684866, -22.328474],\n    中非共和国: [20.939444, 6.611110999999999],\n    加拿大: [-106.346771, 56.130366],\n    瑞士: [8.227511999999999, 46.818188],\n    智利: [-71.542969, -35.675147],\n    中国: [88.8946661, 37.0731642],\n    象牙海岸: [-5.547079999999999, 7.539988999999999],\n    喀麦隆: [12.354722, 7.369721999999999],\n    刚果民主共和国: [21.758664, -4.038333],\n    刚果共和国: [15.827659, -0.228021],\n    哥伦比亚: [-74.297333, 4.570868],\n    哥斯达黎加: [-83.753428, 9.748916999999999],\n    古巴: [-77.781167, 21.521757],\n    北塞浦路斯: [33.429859, 35.126413],\n    塞浦路斯: [33.429859, 35.126413],\n    捷克共和国: [15.472962, 49.81749199999999],\n    德国: [10.451526, 51.165691],\n    吉布提: [42.590275, 11.825138],\n    丹麦: [9.501785, 56.26392],\n    多明尼加共和国: [-70.162651, 18.735693],\n    阿尔及利亚: [1.659626, 28.033886],\n    厄瓜多尔: [-78.18340599999999, -1.831239],\n    埃及: [30.802498, 26.820553],\n    厄立特里亚: [39.782334, 15.179384],\n    西班牙: [-3.74922, 40.46366700000001],\n    爱沙尼亚: [25.013607, 58.595272],\n    埃塞俄比亚: [40.489673, 9.145000000000001],\n    芬兰: [25.748151, 61.92410999999999],\n    斐: [178.065032, -17.713371],\n    福克兰群岛: [-59.523613, -51.796253],\n    法国: [2.213749, 46.227638],\n    加蓬: [11.609444, -0.803689],\n    英国: [-3.435973, 55.378051],\n    格鲁吉亚: [-82.9000751, 32.1656221],\n    加纳: [-1.023194, 7.946527],\n    几内亚: [-9.696645, 9.945587],\n    冈比亚: [-15.310139, 13.443182],\n    几内亚比绍: [-15.180413, 11.803749],\n    赤道几内亚: [10.267895, 1.650801],\n    希腊: [21.824312, 39.074208],\n    格陵兰: [-42.604303, 71.706936],\n    危地马拉: [-90.23075899999999, 15.783471],\n    法属圭亚那: [-53.125782, 3.933889],\n    圭亚那: [-58.93018, 4.860416],\n    洪都拉斯: [-86.241905, 15.199999],\n    克罗地亚: [15.2, 45.1],\n    海地: [-72.285215, 18.971187],\n    匈牙利: [19.503304, 47.162494],\n    印尼: [113.921327, -0.789275],\n    印度: [78.5553853, 12.0201385],\n    爱尔兰: [-8.24389, 53.41291],\n    伊朗: [53.688046, 32.427908],\n    伊拉克: [43.679291, 33.223191],\n    冰岛: [-19.020835, 64.963051],\n    以色列: [34.851612, 31.046051],\n    意大利: [12.56738, 41.87194],\n    牙买加: [-77.297508, 18.109581],\n    约旦: [36.238414, 30.585164],\n    日本: [142.1364432, 44.8147265],\n    新加坡: [101.7727739, -0.0589018],\n    哈萨克斯坦: [66.923684, 48.019573],\n    肯尼亚: [37.906193, -0.023559],\n    吉尔吉斯斯坦: [74.766098, 41.20438],\n    柬埔寨: [104.990963, 12.565679],\n    韩国: [127.766922, 35.907757],\n    科索沃: [20.902977, 42.6026359],\n    科威特: [47.481766, 29.31166],\n    老挝: [102.495496, 19.85627],\n    黎巴嫩: [35.862285, 33.854721],\n    利比里亚: [-9.429499000000002, 6.428055],\n    利比亚: [17.228331, 26.3351],\n    斯里兰卡: [80.77179699999999, 7.873053999999999],\n    莱索托: [28.233608, -29.609988],\n    立陶宛: [23.881275, 55.169438],\n    卢森堡: [6.129582999999999, 49.815273],\n    拉脱维亚: [24.603189, 56.879635],\n    摩洛哥: [-7.092619999999999, 31.791702],\n    摩尔多瓦: [28.369885, 47.411631],\n    马达加斯加: [46.869107, -18.766947],\n    墨西哥: [-102.552784, 23.634501],\n    马其顿: [21.745275, 41.608635],\n    马里: [-3.996166, 17.570692],\n    缅甸: [95.956223, 21.913965],\n    黑山: [19.37439, 42.708678],\n    蒙古: [103.846656, 46.862496],\n    莫桑比克: [35.529562, -18.665695],\n    毛里塔尼亚: [-10.940835, 21.00789],\n    马拉维: [34.301525, -13.254308],\n    马来西亚: [101.975766, 4.210484],\n    纳米比亚: [18.49041, -22.95764],\n    新喀里多尼亚: [165.618042, -20.904305],\n    尼日尔: [8.081666, 17.607789],\n    尼日利亚: [8.675277, 9.081999],\n    尼加拉瓜: [-85.207229, 12.865416],\n    荷兰: [5.291265999999999, 52.132633],\n    挪威: [8.468945999999999, 60.47202399999999],\n    尼泊尔: [84.12400799999999, 28.394857],\n    新西兰: [174.885971, -40.900557],\n    阿曼: [55.923255, 21.512583],\n    巴基斯坦: [69.34511599999999, 30.375321],\n    巴拿马: [-80.782127, 8.537981],\n    秘鲁: [-75.015152, -9.189967],\n    菲律宾: [121.774017, 12.879721],\n    巴布亚新几内亚: [143.95555, -6.314992999999999],\n    波兰: [19.145136, 51.919438],\n    波多黎各: [-66.590149, 18.220833],\n    北朝鲜: [127.510093, 40.339852],\n    葡萄牙: [-8.224454, 39.39987199999999],\n    巴拉圭: [-58.443832, -23.442503],\n    卡塔尔: [51.183884, 25.354826],\n    罗马尼亚: [24.96676, 45.943161],\n    俄罗斯: [105.318756, 61.52401],\n    卢旺达: [29.873888, -1.940278],\n    西撒哈拉: [-12.885834, 24.215527],\n    沙特阿拉伯: [45.079162, 23.885942],\n    苏丹: [30.217636, 12.862807],\n    南苏丹: [31.3069788, 6.876991899999999],\n    塞内加尔: [-14.452362, 14.497401],\n    所罗门群岛: [160.156194, -9.64571],\n    塞拉利昂: [-11.779889, 8.460555],\n    萨尔瓦多: [-88.89653, 13.794185],\n    索马里兰: [46.8252838, 9.411743399999999],\n    索马里: [46.199616, 5.152149],\n    塞尔维亚共和国: [21.005859, 44.016521],\n    苏里南: [-56.027783, 3.919305],\n    斯洛伐克: [19.699024, 48.669026],\n    斯洛文尼亚: [14.995463, 46.151241],\n    瑞典: [18.643501, 60.12816100000001],\n    斯威士兰: [31.465866, -26.522503],\n    叙利亚: [38.996815, 34.80207499999999],\n    乍得: [18.732207, 15.454166],\n    多哥: [0.824782, 8.619543],\n    泰国: [100.992541, 15.870032],\n    塔吉克斯坦: [71.276093, 38.861034],\n    土库曼斯坦: [59.556278, 38.969719],\n    东帝汶: [125.727539, -8.874217],\n    特里尼达和多巴哥: [-61.222503, 10.691803],\n    突尼斯: [9.537499, 33.886917],\n    土耳其: [35.243322, 38.963745],\n    坦桑尼亚联合共和国: [34.888822, -6.369028],\n    乌干达: [32.290275, 1.373333],\n    乌克兰: [31.16558, 48.379433],\n    乌拉圭: [-55.765835, -32.522779],\n    美国: [-95.712891, 37.09024],\n    乌兹别克斯坦: [64.585262, 41.377491],\n    委内瑞拉: [-66.58973, 6.42375],\n    越南: [108.277199, 14.058324],\n    瓦努阿图: [166.959158, -15.376706],\n    西岸: [35.3027226, 31.9465703],\n    也门: [48.516388, 15.552727],\n    南非: [22.937506, -30.559482],\n    赞比亚: [27.849332, -13.133897],\n    津巴布韦: [29.154857, -19.015438],\n  };\n  var data_tmp = [\n    { name: "法国", value: 42 },\n    { name: "新加坡", value: 42 },\n    { name: "澳大利亚", value: 42 },\n    { name: "美国", value: 42 },\n    { name: "墨西哥", value: 42 },\n    { name: "日本", value: 81 },\n  ];\n  var data_tmp2 = [\n    [\n      {\n        name: "澳大利亚",\n        value: 9100,\n      },\n      {\n        name: "日本",\n      },\n    ],\n    [\n      {\n        name: "日本",\n        value: 9100,\n      },\n      {\n        name: "新加坡",\n      },\n    ],\n    [\n      {\n        name: "法国",\n        value: 9100,\n      },\n      {\n        name: "新加坡",\n      },\n    ],\n    [\n      {\n        name: "美国",\n        value: 9100,\n      },\n      {\n        name: "日本",\n      },\n    ],\n    [\n      {\n        name: "法国",\n        value: 9100,\n      },\n      {\n        name: "墨西哥",\n      },\n    ],\n  ];\n  var convertLinesData = function(data) {\n    var res = [];\n    for (var i = 0; i < data.length; i++) {\n      var dataItem = data[i];\n      var fromCoord = geoCoordMap[dataItem[0].name];\n      var toCoord = geoCoordMap[dataItem[1].name];\n      if (fromCoord && toCoord) {\n        res.push({\n          fromName: dataItem[0].name,\n          toName: dataItem[1].name,\n          coords: [fromCoord, toCoord],\n          value: dataItem[0].value,\n        });\n      }\n    }\n    return res;\n  };\n  var max = 480,\n    min = 9; // todo\n  var maxSize4Pin = 100,\n    minSize4Pin = 20;\n  \n  var convertData = function(data) {\n    var res = [];\n    for (var i = 0; i < data.length; i++) {\n      var geoCoord = geoCoordMap[data[i].name];\n      if (geoCoord) {\n        res.push({\n          name: data[i].name,\n          value: geoCoord.concat(data[i].value),\n        });\n      }\n    }\n    return res;\n  };\n  let echartsMapel: any = ref("");\n  const echartsMap = (e: any) => (echartsMapel.value = e);\n  const init = (china) => {\n    // 基于准备好的dom，初始化echarts实例\n    echarts.registerMap("world", china as any);\n    var myChart = echarts.init(echartsMapel.value);\n    // 指定图表的配置项和数据\n    var options: any = {\n      geo: {\n        map: "world",\n        zoom: 1,\n        show: true,\n        roam: true,\n        label: {\n          normal: {\n            show: false,\n          },\n          emphasis: {\n            show: false,\n          },\n        },\n        itemStyle: {\n          normal: {\n            areaColor: "#00D0FF",\n            borderColor: "transparent", //线\n            shadowColor: "#00D0FF", //外发光\n            shadowBlur: 1,\n            areaColor: {\n              type: "pattern",\n              image: "/vue.example/static/dian.png", //配置图片\n              repeat: "repeat", //可选值repeat、no-repeat、repeat-x、repeat-y\n            },\n          },\n          emphasis: {\n            areaColor: "#00D0FF", //悬浮区背景\n          },\n        },\n      },\n      series: [\n        {\n          name: "背景",\n          type: "lines",\n          zlevel: 2,\n  \n          lineStyle: {\n            normal: {\n              color: "#00EEF4",\n              // 线条宽度\n              width: 2,\n  \n              curveness: 0.4,\n              type: [2, 2],\n            },\n          },\n          label: {\n            normal: {\n              show: false,\n              position: "middle",\n              formatter: "{b}",\n            },\n          },\n          data: convertLinesData(data_tmp2),\n        },\n        {\n          label: {\n            normal: {\n              position: "left",\n              color: "#FFF",\n              show: true, //是否显示地名\n              formatter: function(params) {\n                return params.name;\n              },\n            },\n            emphasis: {\n              show: true,\n            },\n          },\n          zlevel: 2,\n          rippleEffect: {\n            //涟漪特效\n            period: 4, //动画时间，值越小速度越快\n            brushType: "fill", //波纹绘制方式 stroke, fill\n            scale: 6, //波纹圆环最大限制，值越大波纹越大\n          },\n          symbol: "circle",\n          symbolSize: 4,\n          itemStyle: {},\n          color: "#00FFF6",\n          type: "effectScatter",\n          coordinateSystem: "geo",\n          data: convertData(data_tmp),\n        },\n      ],\n  \n      tooltip: {\n        show: false,\n        trigger: "item",\n      },\n    };\n    // 使用刚指定的配置项和数据显示图表。\n    myChart.setOption(options);\n  };\n  const state = reactive({});\n  onMounted(() => {\n    fetch("/vue.example/echarts/custom.geo.json")\n      .then(function(response) {\n        //response.status表示响应的http状态码\n        if (response.status === 200) {\n          // json是返回的response提供的一个方法,\n          // 会把返回的json字符串反序列化成对象,也被包装成一个Promise了\n          return response.json();\n          //\n        } else {\n          return {};\n        }\n      })\n      .then(function(data) {\n        //响应的内容\n        init(data);\n        // 响应数据格式化\n      });\n  });\n  <\/script>\n  \n  <style scoped>\n  .content {\n    position: relative;\n    width: 100%;\n    box-shadow: 0px 3px 50px 1px rgba(0, 101, 175, 0.4);\n  }\n  #mainChina {\n    width: 100%;\n    height: 600px;\n    background-color: #00184f;\n  }\n  </style>\n  \n    '},Symbol.toStringTag,{value:"Module"})),F={class:"white-bg"},E={class:"renderEcharts jcfend"},k="/vue.example";n("default",C(o({__name:"renderEcharts",setup(n){t();const e=a();i("");const o=()=>{const n=document.getElementById("repl").querySelector("iframe");var t=n.contentDocument||n.contentWindow.document;console.log("iframeElement :>> ",a);var a=t.getElementById("app");w(a).then((n=>{S.saveAs(n,`${e.params.text}.png`)}))},{importMap:C,vueVersion:M,productionMode:A}=r({runtimeProd:k+"/js/runtime-dom.3.4.19.esm-browser.prod.js",serverRenderer:k+"/js/server-renderer.3.4.19.esm-browser.js"}),O=i({welcomeSFC:D[e.params.text]});i("index.vue");const z=i({"src/tool.js":new b("src/tool.js",'\n/**\n * \n * @param {*} startRatio 表示扇形起始角度在弧度下的比例（范围从0到1）。\n * @param {*} endRatio 表示扇形结束角度在弧度下的比例（范围从0到1）。\n * @param {*} isSelected 一个布尔值，表示扇形是否被选中，这会影响x轴和y轴上的位移。\n * @param {*} isHovered 一个布尔值，表示扇形是否正处于悬停状态，此时会按照一定比例放大尺寸。\n * @param {*} k 影响沿v轴方向曲率的一个可选参数（默认为1/3）。\n * @param {*} h z轴方向高度因子。\n * @returns \n */\nexport const getParametricEquation = (\n  startRatio,\n  endRatio,\n  isSelected,\n  isHovered,\n  k,\n  h\n) => {\n  // 计算\n  let midRatio = (startRatio + endRatio) / 2;\n\n  let startRadian = startRatio * Math.PI * 2;\n  let endRadian = endRatio * Math.PI * 2;\n  let midRadian = midRatio * Math.PI * 2;\n\n  // 如果只有一个扇形，则不实现选中效果。\n  if (startRatio === 0 && endRatio === 1) {\n    isSelected = false;\n  }\n  // isSelected = false;\n  // 通过扇形内径/外径的值，换算出辅助参数 k（默认值 1/3）\n  k = typeof k !== "undefined" ? k : 1 / 3;\n\n  // 计算选中效果分别在 x 轴、y 轴方向上的位移（未选中，则位移均为 0）\n  let offsetX = isSelected ? Math.cos(midRadian) * 0.6 : 0;\n  let offsetY = isSelected ? Math.sin(midRadian) * 0.6 : 0;\n  let offsetZ = isSelected ? 2 : 0;\n  // 计算高亮效果的放大比例（未高亮，则比例为 1）\n  let hoverRate = isSelected ? 1 : 1;\n// let hoverRate =1 \n  // 返回曲面参数方程\n  return {\n    u: {\n      min: -Math.PI,\n      max: Math.PI * 3,\n      step: Math.PI / 32,\n    },\n\n    v: {\n      min: 0,\n      max: Math.PI * 2,\n      step: Math.PI / 20,\n    },\n\n    x: function (u, v) {\n      if (u < startRadian) {\n        return (\n          offsetX + Math.cos(startRadian) * (1 + Math.cos(v) * k) * hoverRate\n        );\n      }\n      if (u > endRadian) {\n        return (\n          offsetX + Math.cos(endRadian) * (1 + Math.cos(v) * k) * hoverRate\n        );\n      }\n      return offsetX + Math.cos(u) * (1 + Math.cos(v) * k) * hoverRate;\n    },\n\n    y: function (u, v) {\n      if (u < startRadian) {\n        return (\n          offsetY + Math.sin(startRadian) * (1 + Math.cos(v) * k) * hoverRate\n        );\n      }\n      if (u > endRadian) {\n        return (\n          offsetY + Math.sin(endRadian) * (1 + Math.cos(v) * k) * hoverRate\n        );\n      }\n      return offsetY + Math.sin(u) * (1 + Math.cos(v) * k) * hoverRate;\n    },\n\n    // z: function (u, v) {\n    //   if (u < -Math.PI * 0.5) {\n    //     return  Math.sin(u);\n    //   }\n    //   if (u > Math.PI * 2.5) {\n    //     return Math.sin(u) * h * 0.1;\n    //   }\n    //   return Math.sin(v) > 0 ? 1 * h * 0.1 : -1;\n    // },\n    z: function(u, v) {\n        if (u < -Math.PI * 0.5) {\n            return offsetZ + Math.sin(u);\n        }\n        if (u > Math.PI * 2.5) {\n            return offsetZ + Math.sin(u);\n        }\n        // 调整扇形高度\n        return offsetZ + (Math.sin(v) > 0 ? 0.1 * h : -1);\n    }\n  };\n};\n\n/**\n *\n * @param {*} pieData 饼状图数据\n * @param {*} internalDiameterRatio 内径比 默认 是 1/3\n */\nexport const getSeriesPie3D = ({\n  pieData, internalDiameterRatio = 1 / 3,pieHeight\n})  => {\n  // echart series 数据\n  let series = [];\n  //所有值的总和 用来计算 饼状图半径\n  let sumValue = 0;\n  // 饼状图起始值\n  let startValue = 0;\n  // 饼状图结束值\n  let endValue = 0;\n  // echart legend 数据\n  let legendData = [];\n  \n  let linesSeries = []; // line3D模拟label指示线\n\n  for (let i in pieData) {\n    legendData.push(pieData[i].name)\n}\n  // 内径比\n  let k =\n    typeof internalDiameterRatio !== "undefined"\n      ? (1 - internalDiameterRatio) / (1 + internalDiameterRatio)\n      : 1 / 3;\n  // 初始化饼状图数据 用来生成3d图做准备\n  for (let index = 0; index < pieData.length; index++) {\n    const element = pieData[index];\n    sumValue += element.value;\n    let seriesItem = {\n      name: typeof element.name === "undefined" ? \'series\'+i : element.name,\n      type: "surface",\n      parametric: true,\n      shading: "realistic",\n      wireframe: {\n        show: false,\n      },\n      // colorMaterial:{\n      //     textureTiling: 1, // 纹理平铺，1是拉伸，数字表示纹理平铺次数\n      //     detailTexture:"https://copyright.bdstatic.com/vcg/creative/cc9c744cf9f7c864889c563cbdeddce6.jpg@h_1280"\n      // },\n      label: {\n        show: true,\n      },\n      //保存数据使用\n      pieData: element,\n      //饼状图状态\n      pieStatus: Object.assign({\n        selected:false,\n        hovered: false,\n        k: k,\n      }, element.pieStatus?element.pieStatus:{}),\n    };\n    // 保证代码健壮性\n    if (typeof element.itemStyle != "undefined") {\n      let itemStyle = {};\n\n      typeof element.itemStyle.color != "undefined"\n        ? (itemStyle.color = element.itemStyle.color)\n        : null;\n      typeof element.itemStyle.opacity != "undefined"\n        ? (itemStyle.opacity = element.itemStyle.opacity)\n        : null;\n\n      seriesItem.itemStyle = itemStyle;\n    }\n    series.push(seriesItem);\n  }\n  // 生成3d饼状图\n  for (let i = 0; i < series.length; i++) {\n    // 计算饼状图 结束位置\n    endValue = startValue + series[i].pieData.value;\n    // 获取开始比例 起始值\n    series[i].pieData.startRatio = startValue / sumValue;\n    // 获取结束比例 终始值\n    series[i].pieData.endRatio = endValue / sumValue;\n    // 曲面的参数方程。在data没被设置的时候，可以通过 parametricEquation 去声明参数参数方程。在 parametric 为true时有效。\n    series[i].parametricEquation = getParametricEquation(\n      series[i].pieData.startRatio,\n      series[i].pieData.endRatio,\n      series[i].pieStatus.selected,\n      series[i].pieStatus.hovered,\n      series[i].pieStatus.k,\n      pieHeight?pieHeight:series[i].pieData.value\n    );\n\n    startValue = endValue;\n    // 计算label指示线的起始和终点位置\n    let midRadian =\n      (series[i].pieData.endRatio + series[i].pieData.startRatio) * Math.PI;\n    let posX = Math.cos(midRadian) * (1.4 + Math.cos(Math.PI / 2));\n    let posY = Math.sin(midRadian) * (1 + Math.cos(Math.PI / 2));\n    let posZ = Math.log(Math.abs(series[i].pieData.value + 1)) * 0.13;\n    let flag =\n      (midRadian >= 0 && midRadian <= Math.PI / 2) ||\n      (midRadian >= (3 * Math.PI) / 2 && midRadian <= Math.PI * 2)\n        ? 1\n        : -1;\n    let color = pieData[i].itemStyle.color;\n    let turningPosArr = [\n        posX*1.4, \n        posY * (1.8) + (i * 0.1 * flag) + (flag < 0 ? -0.5 : 0), \n        posZ * (8)\n    ]\n    let endPosArr = [\n        posX * (2) + (i * 0.1 * flag) + (flag < 0 ? -0.5 : 0), \n        posY * (1.9) + (i * 0.1 * flag) + (flag < 0 ? -0.5 : 0), \n        posZ * (9)\n    ]\n    linesSeries.push(\n      {\n        name: "mouseoutSeries",\n        type: "line3D",\n        lineStyle: {\n          color: color,\n        },\n        data: [[posX, posY, posZ], turningPosArr, endPosArr],\n      },\n      {\n        type: "scatter3D",\n        name: "mouseoutSeries",\n        label: {\n          show: true,\n          distance: 0,\n          position: "center",\n          textStyle: {\n            color: color,\n            //    backgroundColor: color,\n            borderWidth: 2,\n            fontSize: 16,\n            padding: 10,\n            borderRadius: 4,\n          },\n          formatter: "{b}",\n        },\n        symbolSize: 0,\n        data: [\n          {\n            name: series[i].name +""+  series[i].pieData.value,\n            value: endPosArr,\n          },\n        ],\n      }\n    );\n  }\n  series = series.concat(linesSeries);\n\n  return series;\n};\n\n\n',!1)});C.value.imports["echarts-liquidfill"]=k+"/js/echarts-liquidfill.3.1.0.min.js",C.value.imports.echarts=k+"/js/echarts.5.5.0.min.js",C.value.imports["echarts-gl"]=k+"/js/echarts-gl.2.0.9.min.js";const L=s({vueVersion:M,builtinImportMap:C,template:O,files:z});return A.value=!0,i(!0),l({}),p((()=>{console.log("store :>> ",L)})),(n,e)=>{const t=c("el-button"),a=c("el-scrollbar");return d(),h("div",F,[m(a,{class:"renderEchartsEdit"},{default:u((()=>[m(f(g),{theme:"dark",layout:"1111",store:f(L),class:"repl",editor:f(x),id:"repl"},null,8,["store","editor"]),y("div",E,[m(t,{type:"primary",onClick:o},{default:u((()=>[v("下载图片")])),_:1})])])),_:1})])}}}),[["__scopeId","data-v-be11eec2"]]))}}}));
